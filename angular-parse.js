!function(t){function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}var e={};return r.m=t,r.c=e,r.p="",r(0)}([function(t,r,e){e(2),e(12),e(4),e(5),e(6),e(7),e(8),e(9),e(10),e(3),t.exports=e(1).name},function(t,r,e){var n=e(11);t.exports=n.module("ngParse",[])},function(t,r){t.exports=window.Parse&&window},function(t,r,e){function n(){function t(e){return this instanceof t?(this.wrapPrefix=r.wrapPrefix,void(this.wrap=function(t){return function(){var r=Array.prototype.slice.call(arguments),n=t.apply(this,r);return e(n.then.bind(n))}})):new t(e)}var r=this;r.wrapPrefix="",t.$inject=["$q"],r.$get=t}var i=e(1);n.$inject=[],i.provider("ParseUtils",n)},function(t,r,e){function n(){function t(){function t(t,r,i){r=Object(r);var o=n.call(a.Object,t,r,i),c=s.isArray(r.$attributes)?r.$attributes:[];return e(o,c),o}function e(t,e){s.isArray(e)||(e=Array.prototype.slice.call(arguments,1)),t.$attributes=[],t.defineAttributes=function(r){s.isArray(r)||(r=Array.prototype.slice.call(arguments)),r.forEach(function(r){Object.defineProperty(t.prototype,r,{get:function(){return this.get(r)},set:function(t){this.set(r,t)},configurable:!0,enumerable:!0})}),o.union(t.$attributes,r)},t.defineAttributes(r.$attributes),t.defineAttributes(e)}var n=a.Object.extend;return t.defineAttributes=e,t.$classes=r.$classes,a.Class=t,t}var r=this;r.$classes={},r.$attributes=[],r.register=function(t){s.isArray(t)||(t=Array.prototype.slice.call(arguments));for(var e=0,n=t.length;n>e;e++)r.$classes[t[e]]=t[e]},r.defineAttributes=function(t){s.isArray(t)||(t=Array.prototype.slice.call(arguments)),o.union(r.$attributes,t)},r.$get=t,t.$inject=[]}function i(t,r){for(var e in r.$classes)r.$classes.hasOwnProperty(e)&&"string"==typeof r.$classes[e]&&(r.$classes[e]=t.get(e))}var s=e(11),a=e(2).Parse,o=e(13),c=e(1);n.$inject=[],i.$inject=["$injector","ParseClass"],c.provider("ParseClass",n).run(i)},function(t,r,e){function n(t){var r=i.Cloud;return["run"].forEach(function(e){r[t.wrapPrefix+e]=t.wrap(r[e])}),r}var i=e(2).Parse,s=e(1);e(3),n.$inject=["ParseUtils"],s.factory("ParseCloud",n)},function(t,r,e){function n(){function t(t){var r=i.FacebookUtils;return["link","logIn","unlink"].forEach(function(e){r[t.wrapPrefix+e]=t.wrap(r[e])}),r}var r=this;r.FacebookUtils=i.FacebookUtils,r.initialize=r.init=function(t){i.FacebookUtils.init(t)},r.$get=t,t.$inject=["ParseUtils"]}var i=e(2).Parse,s=e(1);e(3),n.$inject=[],s.provider("ParseFacebookUtils",n)},function(t,r,e){function n(t){var r=i.File;return["save"].forEach(function(e){r.prototype[t.wrapPrefix+e]=t.wrap(r.prototype[e])}),r}var i=e(2).Parse,s=e(1);e(3),n.$inject=["ParseUtils"],s.factory("ParseFile",n)},function(t,r,e){function n(t,r){var e=i.Object;return Object.defineProperty(e.prototype,"$id",{get:function(){return void 0===this.$$id||null===this.$$id?this.id:this.$$id},set:function(t){this.$$id=t},configurable:!0,enumerable:!1}),["destroyAll","fetchAll","fetchAllIfNeeded","saveAll"].forEach(function(t){e[r.wrapPrefix+t]=r.wrap(e[t])}),["destroy","fetch","save"].forEach(function(t){e.prototype[r.wrapPrefix+t]=r.wrap(e.prototype[t])}),e.prototype.$on=function(r,e,n,i){if(!(r instanceof t.constructor))throw TypeError("$scope is not instanceof Scope");if("string"!=typeof e)throw TypeError("eventName is not string");if("function"!=typeof n)throw TypeError("callback is not function");var s=function(){var t=Array.prototype.slice.call(arguments);r.$applyAsync(n.bind(i,t))};this.on(e,s,i);var a=this.off.bind(this,e,s,i);return r.$on("$destroy",a),a},e}var i=e(2).Parse,s=e(1);e(3),n.$inject=["$rootScope","ParseUtils"],s.factory("ParseObject",n)},function(t,r,e){function n(t){var r=i.Query;return["count","find","first","get"].forEach(function(e){r.prototype[t.wrapPrefix+e]=t.wrap(r.prototype[e])}),r}var i=e(2).Parse,s=e(1);e(3),n.$inject=["ParseUtils"],s.factory("ParseQuery",n)},function(t,r,e){function n(){function t(t,e){var n=i.User;return Object.defineProperties(n.prototype,{username:{get:function(){return this.getUsername()},set:function(t){this.setUsername(t)},configurable:!0,enumerable:!0},password:{get:function(){return this.get("password")},set:function(t){this.setPassword(t)},configurable:!0,enumerable:!0},email:{get:function(){return this.getEmail()},set:function(t){this.setEmail(t)},configurable:!0,enumerable:!0}}),["become","enableRevocableSession","logIn","logOut","requestPasswordReset","signUp"].forEach(function(r){n[t.wrapPrefix+r]=t.wrap(n[r])}),["logIn","signUp"].forEach(function(r){n.prototype[t.wrapPrefix+r]=t.wrap(n.prototype[r])}),e.defineAttributes(n,r.$attributes),e.$classes.ParseUser=n,n}var r=this;r.User=i.User,r.$attributes=[],r.authenticated=function(){return Boolean(i.User.current())},r.defineAttributes=function(t){t instanceof Array||(t=Array.prototype.slice.call(arguments)),r.$attributes.push.apply(r.$attributes,t)},r.$get=t,t.$inject=["ParseUtils","ParseClass"]}var i=e(2).Parse,s=e(1);e(4),e(3),n.$inject=[],s.provider("ParseUser",n)},function(t,r){t.exports=window.angular},function(t,r,e){function n(t,r,e){function n(){return s}var i=this;i.Parse=s,i.Class=t,i.FacebookUtils=r,i.User=e,i.initialize=function(t,r){s.initialize(t,r)},i.$get=n,n.$inject=["ParseClass","ParseCloud","ParseFacebookUtils","ParseFile","ParseObject","ParseQuery","ParseUser","ParseUtils"]}function i(){}var s=e(2).Parse,a=e(1);e(4),e(5),e(6),e(7),e(8),e(9),e(10),e(3),n.$inject=["ParseClassProvider","ParseFacebookUtilsProvider","ParseUserProvider"],i.$inject=["Parse"],a.provider("Parse",n).run(i)},function(t,r){function e(t,r){t=angular.isArray(arguments[0])&&arguments[0]||[],r=Array.prototype.slice.call(arguments,1);for(var e,n=0,i=r.length;i>n;n++)if(e=r[n],angular.isArray(e))for(var s,a=0,o=e.length;o>a;a++)s=e[a],-1==t.indexOf(s)&&t.push(s);return t}t.exports.union=e}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYW5ndWxhci1wYXJzZS5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMTlmNmQxMzM4OGJlMWFhZWQyZGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LlBhcnNlICYmIHdpbmRvd1wiIiwid2VicGFjazovLy8uL3NyYy9QYXJzZVV0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9QYXJzZUNsYXNzLmpzIiwid2VicGFjazovLy8uL3NyYy9QYXJzZUNsb3VkLmpzIiwid2VicGFjazovLy8uL3NyYy9QYXJzZUZhY2Vib29rVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BhcnNlRmlsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUGFyc2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BhcnNlUXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BhcnNlVXNlci5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3aW5kb3cuYW5ndWxhclwiIiwid2VicGFjazovLy8uL3NyYy9QYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwibmFtZSIsImFuZ3VsYXIiLCJ3aW5kb3ciLCJQYXJzZSIsIlBhcnNlVXRpbHNQcm92aWRlciIsIlBhcnNlVXRpbHNTZXJ2aWNlIiwiJHEiLCJ0aGlzIiwid3JhcFByZWZpeCIsInByb3ZpZGVyIiwid3JhcCIsImZ1bmMiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImFyZ3VtZW50cyIsInByb21pc2UiLCJhcHBseSIsInRoZW4iLCJiaW5kIiwiJGluamVjdCIsIiRnZXQiLCJuZ1BhcnNlTW9kdWxlIiwiUGFyc2VDbGFzc1Byb3ZpZGVyIiwiUGFyc2VDbGFzc0ZhY3RvcnkiLCJQYXJzZUNsYXNzIiwiY2xhc3NOYW1lIiwicHJvdG9Qcm9wcyIsImNsYXNzUHJvcHMiLCJPYmplY3QiLCJwYXJzZUNsYXNzIiwiZXh0ZW5kIiwiYXR0cmlidXRlcyIsImlzQXJyYXkiLCIkYXR0cmlidXRlcyIsImRlZmluZUF0dHJpYnV0ZXMiLCJDbGFzcyIsImZvckVhY2giLCJhdHRyaWJ1dGUiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInNldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsInV0aWxzIiwidW5pb24iLCIkY2xhc3NlcyIsInJlZ2lzdGVyIiwiY2xhc3NlcyIsImkiLCJsZW5ndGgiLCJpbml0IiwiJGluamVjdG9yIiwiaGFzT3duUHJvcGVydHkiLCJydW4iLCJQYXJzZUNsb3VkRmFjdG9yeSIsIlBhcnNlVXRpbHMiLCJQYXJzZUNsb3VkIiwiQ2xvdWQiLCJtZXRob2QiLCJmYWN0b3J5IiwiUGFyc2VGYWNlYm9va1V0aWxzUHJvdmlkZXIiLCJQYXJzZUZhY2Vib29rVXRpbHNGYWN0b3J5IiwiUGFyc2VGYWNlYm9va1V0aWxzIiwiRmFjZWJvb2tVdGlscyIsImluaXRpYWxpemUiLCJvcHRpb25zIiwiUGFyc2VGaWxlRmFjdG9yeSIsIlBhcnNlRmlsZSIsIkZpbGUiLCJQYXJzZU9iamVjdEZhY3RvcnkiLCIkcm9vdFNjb3BlIiwiUGFyc2VPYmplY3QiLCJ1bmRlZmluZWQiLCIkJGlkIiwiJG9uIiwiJHNjb3BlIiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJjb250ZXh0IiwiY29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY2FsbGJhY2siLCIkYXBwbHlBc3luYyIsIm9uIiwib2ZmIiwiUGFyc2VRdWVyeUZhY3RvcnkiLCJQYXJzZVF1ZXJ5IiwiUXVlcnkiLCJQYXJzZVVzZXJQcm92aWRlciIsIlBhcnNlVXNlckZhY3RvcnkiLCJQYXJzZVVzZXIiLCJVc2VyIiwiZGVmaW5lUHJvcGVydGllcyIsInVzZXJuYW1lIiwiZ2V0VXNlcm5hbWUiLCJzZXRVc2VybmFtZSIsInBhc3N3b3JkIiwic2V0UGFzc3dvcmQiLCJlbWFpbCIsImdldEVtYWlsIiwic2V0RW1haWwiLCJhdXRoZW50aWNhdGVkIiwiQm9vbGVhbiIsImN1cnJlbnQiLCJwdXNoIiwiUGFyc2VQcm92aWRlciIsIlBhcnNlRmFjdG9yeSIsImFwcGxpY2F0aW9uSWQiLCJqYXZhU2NyaXB0S2V5IiwiZHN0Iiwic3JjIiwiYXJyIiwic3JjTGVuZ3RoIiwidmFsIiwiaiIsImFyckxlbmd0aCIsImluZGV4T2YiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDSW5CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FFLFdBQ0FFLEdBQUFKLEVBQ0FLLFFBQUEsRUFVQSxPQU5BUCxHQUFBRSxHQUFBTSxLQUFBSCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSCxHQUdBSSxFQUFBRSxRQUFBLEVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBcUNBLE9BVEFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsR0FHQVYsRUFBQSxLRE1NLFNBQVNJLEVBQVFELEVBQVNILEdFNUNoQ0EsRUFBQSxHQUNBQSxFQUFBLElBQ0FBLEVBQUEsR0FDQUEsRUFBQSxHQUNBQSxFQUFBLEdBQ0FBLEVBQUEsR0FDQUEsRUFBQSxHQUNBQSxFQUFBLEdBQ0FBLEVBQUEsSUFDQUEsRUFBQSxHQUVBSSxFQUFBRCxRQUFBSCxFQUFBLEdBQUFXLE1GbURNLFNBQVNQLEVBQVFELEVBQVNILEdHOURoQyxHQUFBWSxHQUFBWixFQUFBLEdBU0FJLEdBQUFELFFBQUFTLEVBQUFSLE9BQUEsZUhxRU0sU0FBU0EsRUFBUUQsR0k5RXZCQyxFQUFBRCxRQUFBVSxPQUFBQyxPQUFBRCxRSm9GTSxT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QW9CLEVBQUFsQyxFQUFBLEVBQ0FBLEdBQUEsR0FDQUEsRUFBQSxHQUNBQSxFQUFBLEdBQ0FBLEVBQUEsR0FDQUEsRUFBQSxHQUNBQSxFQUFBLEdBQ0FBLEVBQUEsSUFDQUEsRUFBQSxHQWFBdUgsRUFBQXZGLFNBQUEsdUVBeUZBZ0MsRUFBQWhDLFNBQUEsU0FJQUUsRUFDQWQsU0FBQSxRQUFBbUcsR0FDQXBELElBQUFILElkd3RCTSxTQUFTNUQsRUFBUUQsR2V0MEJ2QixRQUFBdUQsR0FBQWlFLEVBQUFDLEdBQ0FELEVBQUEvRyxRQUFBaUMsUUFBQWxCLFVBQUEsS0FBQUEsVUFBQSxPQUNBaUcsRUFBQXBHLE1BQUFDLFVBQUFDLE1BQUFuQixLQUFBb0IsVUFBQSxFQUVBLFFBQUFrRyxHQUFBL0QsRUFBQSxFQUFBZ0UsRUFBQUYsRUFBQTdELE9BQThDK0QsRUFBQWhFLEVBQWVBLElBRTdELEdBREErRCxFQUFBRCxFQUFBOUQsR0FDQWxELFFBQUFpQyxRQUFBZ0YsR0FDQSxPQUFBRSxHQUFBQyxFQUFBLEVBQUFDLEVBQUFKLEVBQUE5RCxPQUFnRGtFLEVBQUFELEVBQWVBLElBQy9ERCxFQUFBRixFQUFBRyxHQUNBLElBQUFMLEVBQUFPLFFBQUFILElBQUFKLEVBQUFMLEtBQUFTLEVBSUEsT0FBQUosR0FHQXZILEVBQUFELFFBQUF1RCIsImZpbGUiOiJhbmd1bGFyLXBhcnNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xyXG5cdF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xyXG5cdF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG5cdF9fd2VicGFja19yZXF1aXJlX18oNyk7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xyXG5cdF9fd2VicGFja19yZXF1aXJlX18oMTApO1xyXG5cdF9fd2VicGFja19yZXF1aXJlX18oMyk7XHJcblx0XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpLm5hbWU7XHJcblxuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGFuZ3VsYXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAbmdkb2Mgb3ZlcnZpZXdcclxuXHQgKiBAbmFtZSBuZ1BhcnNlXHJcblx0ICpcclxuXHQgKiBAZGVzY3JpcHRpb25cclxuXHQgKiBBbmd1bGFyIHdyYXBwZXIgZm9yIFtQYXJzZS5jb20gSmF2YVNjcmlwdCBTREtde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvZ3VpZGV9LlxyXG5cdCAqL1xyXG5cdG1vZHVsZS5leHBvcnRzID0gYW5ndWxhci5tb2R1bGUoJ25nUGFyc2UnLCBbXSk7XHJcblxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuUGFyc2UgJiYgd2luZG93O1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIG5nUGFyc2VNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xyXG5cdFxyXG5cdFBhcnNlVXRpbHNQcm92aWRlci4kaW5qZWN0ID0gW107XHJcblx0ZnVuY3Rpb24gUGFyc2VVdGlsc1Byb3ZpZGVyKCkge1xyXG5cdCAgdmFyIHByb3ZpZGVyID0gdGhpcztcclxuXHRcclxuXHQgIHByb3ZpZGVyLndyYXBQcmVmaXggPSAnJztcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQG5nZG9jIG9iamVjdFxyXG5cdCAgICogQG5hbWUgbmdQYXJzZS5QYXJzZVV0aWxzXHJcblx0ICAgKlxyXG5cdCAgICogQHJlcXVpcmVzICRxXHJcblx0ICAgKlxyXG5cdCAgICogQGRlc2NyaXB0aW9uXHJcblx0ICAgKiBQYXJzZSBVdGlscy5cclxuXHQgICAqL1xyXG5cdCAgUGFyc2VVdGlsc1NlcnZpY2UuJGluamVjdCA9IFsnJHEnXTtcclxuXHQgIHByb3ZpZGVyLiRnZXQgPSBQYXJzZVV0aWxzU2VydmljZTtcclxuXHQgIGZ1bmN0aW9uIFBhcnNlVXRpbHNTZXJ2aWNlKCRxKSB7XHJcblx0ICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXJzZVV0aWxzU2VydmljZSkpIHJldHVybiBuZXcgUGFyc2VVdGlsc1NlcnZpY2UoJHEpO1xyXG5cdFxyXG5cdCAgICB0aGlzLndyYXBQcmVmaXggPSBwcm92aWRlci53cmFwUHJlZml4O1xyXG5cdFxyXG5cdCAgICAvKipcclxuXHQgICAgICogQG5nZG9jIG1ldGhvZFxyXG5cdCAgICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlVXRpbHMjd3JhcFxyXG5cdCAgICAgKiBAbWV0aG9kT2YgbmdQYXJzZS5QYXJzZVV0aWxzXHJcblx0ICAgICAqXHJcblx0ICAgICAqIEBkZXNjcmlwdGlvblxyXG5cdCAgICAgKiBXcmFwIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xyXG5cdCAgICAgKiBbUGFyc2UuUHJvbWlzZV17QGxpbmsgaHR0cHM6Ly9wYXJzZS5jb20vZG9jcy9qcy9hcGkvc3ltYm9scy9QYXJzZS5Qcm9taXNlLmh0bWx9XHJcblx0ICAgICAqIGludG8gZnVuY3Rpb24gdGhhdCByZXR1cm5zICRxIHByb21pc2UuXHJcblx0ICAgICAqXHJcblx0ICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgRnVuY3Rpb24gdGhhdCByZXR1cm5zXHJcblx0ICAgICAqIFtQYXJzZS5Qcm9taXNlXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLlByb21pc2UuaHRtbH0uXHJcblx0ICAgICAqXHJcblx0ICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCByZXR1cm5zICRxIHByb21pc2UuXHJcblx0ICAgICAqL1xyXG5cdCAgICB0aGlzLndyYXAgPSBmdW5jdGlvbiAoZnVuYykge1xyXG5cdCAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcblx0ICAgICAgICB2YXIgcHJvbWlzZSA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XHJcblx0ICAgICAgICByZXR1cm4gJHEocHJvbWlzZS50aGVuLmJpbmQocHJvbWlzZSkpO1xyXG5cdCAgICAgIH07XHJcblx0ICAgIH1cclxuXHQgIH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0bmdQYXJzZU1vZHVsZVxyXG5cdCAgLnByb3ZpZGVyKCdQYXJzZVV0aWxzJywgUGFyc2VVdGlsc1Byb3ZpZGVyKTtcclxuXG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgYW5ndWxhciA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xyXG5cdHZhciBQYXJzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMikuUGFyc2U7XHJcblx0dmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XHJcblx0dmFyIG5nUGFyc2VNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBuZ2RvYyBvYmplY3RcclxuXHQgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlQ2xhc3NQcm92aWRlclxyXG5cdCAqXHJcblx0ICogQGRlc2NyaXB0aW9uXHJcblx0ICogUHJvdmlkZXIgZm9yIFBhcnNlQ2xhc3Mgc2VydmljZS5cclxuXHQgKi9cclxuXHRQYXJzZUNsYXNzUHJvdmlkZXIuJGluamVjdCA9IFtdO1xyXG5cdGZ1bmN0aW9uIFBhcnNlQ2xhc3NQcm92aWRlcigpIHtcclxuXHQgIHZhciBwcm92aWRlciA9IHRoaXM7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEBuZ2RvYyBwcm9wZXJ0eVxyXG5cdCAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUNsYXNzUHJvdmlkZXIjJGNsYXNzZXNcclxuXHQgICAqIEBwcm9wZXJ0eU9mIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyXHJcblx0ICAgKlxyXG5cdCAgICogQGRlc2NyaXB0aW9uXHJcblx0ICAgKiBDbGFzcyBuYW1lcyBmb3IgcmVnaXN0cmF0aW9uLlxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci4kY2xhc3NlcyA9IHt9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBAbmdkb2MgcHJvcGVydHlcclxuXHQgICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyIyRhdHRyaWJ1dGVzXHJcblx0ICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlQ2xhc3NQcm92aWRlclxyXG5cdCAgICpcclxuXHQgICAqIEBkZXNjcmlwdGlvblxyXG5cdCAgICogVGhlIG5hbWVzIG9mIHRoZSBhdHRyaWJ1dGVzIHRvIGNyZWF0ZSBnZXR0ZXJzIGFuZCBzZXR0ZXJzLlxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci4kYXR0cmlidXRlcyA9IFtdO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBAbmdkb2MgbWV0aG9kXHJcblx0ICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlQ2xhc3NQcm92aWRlciNyZWdpc3RlclxyXG5cdCAgICogQG1ldGhvZE9mIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyXHJcblx0ICAgKlxyXG5cdCAgICogQGRlc2NyaXB0aW9uXHJcblx0ICAgKiBSZWdpc3RlciBmYWN0b3JpZXMsIHdoaWNoIGNyZWF0ZSBQYXJzZSBjbGFzc2VzLlxyXG5cdCAgICogSXQgbWF5IGJlIGhlbHBmdWwgdG8gSW5pdGlhbGl6ZSBQYXJzZSBjbGFzc2VzIGJlZm9yZSB1c2luZy5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0gey4uLlN0cmluZ3xTdHJpbmdbXX0gY2xhc3NlcyBDbGFzcyBuYW1lcyBmb3IgcmVnaXN0cmF0aW9uLlxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci5yZWdpc3RlciA9IGZ1bmN0aW9uIChjbGFzc2VzKSB7XHJcblx0ICAgIGlmICghYW5ndWxhci5pc0FycmF5KGNsYXNzZXMpKSB7XHJcblx0ICAgICAgY2xhc3NlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGNsYXNzZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICBwcm92aWRlci4kY2xhc3Nlc1tjbGFzc2VzW2ldXSA9IGNsYXNzZXNbaV07XHJcblx0ICAgIH1cclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEBuZ2RvYyBtZXRob2RcclxuXHQgICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyI2RlZmluZUF0dHJpYnV0ZXNcclxuXHQgICAqIEBtZXRob2RPZiBuZ1BhcnNlLlBhcnNlQ2xhc3NQcm92aWRlclxyXG5cdCAgICpcclxuXHQgICAqIEBkZXNjcmlwdGlvblxyXG5cdCAgICogRGVmaW5lcyBhdHRyaWJ1dGVzIGZvciBhbGwgY2xhc3Nlcy5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0gey4uLlN0cmluZ3xTdHJpbmdbXX0gYXR0cmlidXRlcyBDbGFzcyBuYW1lcyBmb3IgcmVnaXN0cmF0aW9uLlxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci5kZWZpbmVBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKGF0dHJpYnV0ZXMpIHtcclxuXHQgICAgaWYgKCFhbmd1bGFyLmlzQXJyYXkoYXR0cmlidXRlcykpIHtcclxuXHQgICAgICBhdHRyaWJ1dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICB1dGlscy51bmlvbihwcm92aWRlci4kYXR0cmlidXRlcywgYXR0cmlidXRlcyk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBAbmdkb2Mgc2VydmljZVxyXG5cdCAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUNsYXNzXHJcblx0ICAgKlxyXG5cdCAgICogQGRlc2NyaXB0aW9uXHJcblx0ICAgKiBUaGlzIGlzIGEgd3JhcHBlciBmb3JcclxuXHQgICAqIFtgUGFyc2UuT2JqZWN0LmV4dGVuZGBde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvYXBpL3N5bWJvbHMvUGFyc2UuT2JqZWN0Lmh0bWwjLmV4dGVuZH0uXHJcblx0ICAgKiBDcmVhdGVzIGEgbmV3IHN1YmNsYXNzIG9mIFBhcnNlLk9iamVjdCBmb3IgdGhlIGdpdmVuIFBhcnNlIGNsYXNzIG5hbWUuXHJcblx0ICAgKi9cclxuXHQgIHByb3ZpZGVyLiRnZXQgPSBQYXJzZUNsYXNzRmFjdG9yeTtcclxuXHQgIFBhcnNlQ2xhc3NGYWN0b3J5LiRpbmplY3QgPSBbXTtcclxuXHQgIGZ1bmN0aW9uIFBhcnNlQ2xhc3NGYWN0b3J5KCkge1xyXG5cdCAgICB2YXIgZXh0ZW5kID0gUGFyc2UuT2JqZWN0LmV4dGVuZDtcclxuXHRcclxuXHQgICAgZnVuY3Rpb24gUGFyc2VDbGFzcyhjbGFzc05hbWUsIHByb3RvUHJvcHMsIGNsYXNzUHJvcHMpIHtcclxuXHQgICAgICBwcm90b1Byb3BzID0gT2JqZWN0KHByb3RvUHJvcHMpO1xyXG5cdFxyXG5cdCAgICAgIHZhciBwYXJzZUNsYXNzID0gZXh0ZW5kLmNhbGwoUGFyc2UuT2JqZWN0LCBjbGFzc05hbWUsIHByb3RvUHJvcHMsIGNsYXNzUHJvcHMpO1xyXG5cdCAgICAgIHZhciBhdHRyaWJ1dGVzID0gYW5ndWxhci5pc0FycmF5KHByb3RvUHJvcHMuJGF0dHJpYnV0ZXMpID8gcHJvdG9Qcm9wcy4kYXR0cmlidXRlcyA6IFtdO1xyXG5cdFxyXG5cdCAgICAgIGRlZmluZUF0dHJpYnV0ZXMocGFyc2VDbGFzcywgYXR0cmlidXRlcyk7XHJcblx0XHJcblx0ICAgICAgcmV0dXJuIHBhcnNlQ2xhc3M7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEBuZ2RvYyBtZXRob2RcclxuXHQgICAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUNsYXNzI2RlZmluZUF0dHJpYnV0ZXNcclxuXHQgICAgICogQG1ldGhvZE9mIG5nUGFyc2UuUGFyc2VDbGFzc1xyXG5cdCAgICAgKiBAc3RhdGljXHJcblx0ICAgICAqXHJcblx0ICAgICAqIEBkZXNjcmlwdGlvblxyXG5cdCAgICAgKiBEZWZpbmVzIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBjbGFzcy5cclxuXHQgICAgICpcclxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IENsYXNzIFN1YmNsYXNzIG9mIFBhcnNlLk9iamVjdC5cclxuXHQgICAgICogQHBhcmFtIHsuLi5TdHJpbmd8U3RyaW5nW119IGF0dHJpYnV0ZXMgQXR0cmlidXRlIG5hbWVzLlxyXG5cdCAgICAgKi9cclxuXHQgICAgUGFyc2VDbGFzcy5kZWZpbmVBdHRyaWJ1dGVzID0gZGVmaW5lQXR0cmlidXRlcztcclxuXHQgICAgZnVuY3Rpb24gZGVmaW5lQXR0cmlidXRlcyhDbGFzcywgYXR0cmlidXRlcykge1xyXG5cdCAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KGF0dHJpYnV0ZXMpKSB7XHJcblx0ICAgICAgICBhdHRyaWJ1dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuXHQgICAgICB9XHJcblx0XHJcblx0ICAgICAgQ2xhc3MuJGF0dHJpYnV0ZXMgPSBbXTtcclxuXHRcclxuXHQgICAgICBDbGFzcy5kZWZpbmVBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKGF0dHJpYnV0ZXMpIHtcclxuXHQgICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KGF0dHJpYnV0ZXMpKSB7XHJcblx0ICAgICAgICAgIGF0dHJpYnV0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgfVxyXG5cdFxyXG5cdCAgICAgICAgYXR0cmlidXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuXHQgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENsYXNzLnByb3RvdHlwZSwgYXR0cmlidXRlLCB7XHJcblx0ICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoYXR0cmlidXRlKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICB0aGlzLnNldChhdHRyaWJ1dGUsIHZhbHVlKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuXHQgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXHJcblx0ICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfSk7XHJcblx0XHJcblx0ICAgICAgICB1dGlscy51bmlvbihDbGFzcy4kYXR0cmlidXRlcywgYXR0cmlidXRlcyk7XHJcblx0ICAgICAgfTtcclxuXHRcclxuXHQgICAgICBDbGFzcy5kZWZpbmVBdHRyaWJ1dGVzKHByb3ZpZGVyLiRhdHRyaWJ1dGVzKTtcclxuXHQgICAgICBDbGFzcy5kZWZpbmVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBAbmdkb2MgcHJvcGVydHlcclxuXHQgICAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUNsYXNzUHJvdmlkZXIjJGNsYXNzZXNcclxuXHQgICAgICogQHByb3BlcnR5T2YgbmdQYXJzZS5QYXJzZUNsYXNzXHJcblx0ICAgICAqIEBzdGF0aWNcclxuXHQgICAgICpcclxuXHQgICAgICogQGRlc2NyaXB0aW9uXHJcblx0ICAgICAqIFJlZ2lzdGVyZWQgY2xhc3Nlcy5cclxuXHQgICAgICovXHJcblx0ICAgIFBhcnNlQ2xhc3MuJGNsYXNzZXMgPSBwcm92aWRlci4kY2xhc3NlcztcclxuXHRcclxuXHQgICAgUGFyc2UuQ2xhc3MgPSBQYXJzZUNsYXNzO1xyXG5cdFxyXG5cdCAgICByZXR1cm4gUGFyc2VDbGFzcztcclxuXHQgIH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQG5nZG9jIGZ1bmN0aW9uXHJcblx0ICogQG5hbWUgaW5pdFxyXG5cdCAqXHJcblx0ICogQHJlcXVpcmVzICRpbmplY3RvclxyXG5cdCAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlQ2xhc3NcclxuXHQgKlxyXG5cdCAqIEBkZXNjcmlwdGlvblxyXG5cdCAqIEluaXRpYWxpemVzIHJlZ2lzdGVyZWQgY2xhc3Nlcy5cclxuXHQgKi9cclxuXHRpbml0LiRpbmplY3QgPSBbJyRpbmplY3RvcicsICdQYXJzZUNsYXNzJ107XHJcblx0ZnVuY3Rpb24gaW5pdCgkaW5qZWN0b3IsIFBhcnNlQ2xhc3MpIHtcclxuXHQgIGZvciAodmFyIGkgaW4gUGFyc2VDbGFzcy4kY2xhc3Nlcykge1xyXG5cdCAgICBpZiAoIVBhcnNlQ2xhc3MuJGNsYXNzZXMuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG5cdCAgICBpZiAodHlwZW9mIFBhcnNlQ2xhc3MuJGNsYXNzZXNbaV0gIT0gJ3N0cmluZycpIGNvbnRpbnVlO1xyXG5cdCAgICBQYXJzZUNsYXNzLiRjbGFzc2VzW2ldID0gJGluamVjdG9yLmdldChpKTtcclxuXHQgIH1cclxuXHR9XHJcblx0XHJcblx0bmdQYXJzZU1vZHVsZVxyXG5cdCAgLnByb3ZpZGVyKCdQYXJzZUNsYXNzJywgUGFyc2VDbGFzc1Byb3ZpZGVyKVxyXG5cdCAgLnJ1bihpbml0KTtcclxuXG5cbi8qKiovIH0sXG4vKiA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgUGFyc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLlBhcnNlO1xyXG5cdHZhciBuZ1BhcnNlTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBuZ2RvYyBvYmplY3RcclxuXHQgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlQ2xvdWRcclxuXHQgKlxyXG5cdCAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXRpbHNcclxuXHQgKlxyXG5cdCAqIEBkZXNjcmlwdGlvblxyXG5cdCAqIFRoaXMgaXMgYSB3cmFwcGVyIGZvclxyXG5cdCAqIFtQYXJzZS5DbG91ZF17QGxpbmsgaHR0cHM6Ly9wYXJzZS5jb20vZG9jcy9qcy9hcGkvc3ltYm9scy9QYXJzZS5DbG91ZC5odG1sfS5cclxuXHQgKi9cclxuXHRQYXJzZUNsb3VkRmFjdG9yeS4kaW5qZWN0ID0gWydQYXJzZVV0aWxzJ107XHJcblx0ZnVuY3Rpb24gUGFyc2VDbG91ZEZhY3RvcnkoUGFyc2VVdGlscykge1xyXG5cdCAgdmFyIFBhcnNlQ2xvdWQgPSBQYXJzZS5DbG91ZDtcclxuXHRcclxuXHQgIFsncnVuJ10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XHJcblx0ICAgIFBhcnNlQ2xvdWRbUGFyc2VVdGlscy53cmFwUHJlZml4ICsgbWV0aG9kXSA9IFBhcnNlVXRpbHMud3JhcChQYXJzZUNsb3VkW21ldGhvZF0pO1xyXG5cdCAgfSk7XHJcblx0XHJcblx0ICByZXR1cm4gUGFyc2VDbG91ZDtcclxuXHR9XHJcblx0XHJcblx0bmdQYXJzZU1vZHVsZVxyXG5cdCAgLmZhY3RvcnkoJ1BhcnNlQ2xvdWQnLCBQYXJzZUNsb3VkRmFjdG9yeSk7XHJcblxuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIFBhcnNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5QYXJzZTtcclxuXHR2YXIgbmdQYXJzZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAbmdkb2Mgb2JqZWN0XHJcblx0ICogQG5hbWUgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlclxyXG5cdCAqXHJcblx0ICogQGRlc2NyaXB0aW9uXHJcblx0ICogUHJvdmlkZXIgZm9yIFBhcnNlRmFjZWJvb2tVdGlscyBzZXJ2aWNlLlxyXG5cdCAqL1xyXG5cdFBhcnNlRmFjZWJvb2tVdGlsc1Byb3ZpZGVyLiRpbmplY3QgPSBbXTtcclxuXHRmdW5jdGlvbiBQYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlcigpIHtcclxuXHQgIHZhciBwcm92aWRlciA9IHRoaXM7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEBuZ2RvYyBwcm9wZXJ0eVxyXG5cdCAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlciNGYWNlYm9va1V0aWxzXHJcblx0ICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlRmFjZWJvb2tVdGlsc1Byb3ZpZGVyXHJcblx0ICAgKlxyXG5cdCAgICogQGRlc2NyaXB0aW9uXHJcblx0ICAgKiBTZWUgW0ZhY2Vib29rVXRpbHNde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvYXBpL3N5bWJvbHMvUGFyc2UuRmFjZWJvb2tVdGlscy5odG1sfVxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci5GYWNlYm9va1V0aWxzID0gUGFyc2UuRmFjZWJvb2tVdGlscztcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQG5nZG9jIG1ldGhvZFxyXG5cdCAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlciNpbml0aWFsaXplXHJcblx0ICAgKiBAYWxpYXMgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlciNpbml0XHJcblx0ICAgKiBAbWV0aG9kT2YgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlclxyXG5cdCAgICpcclxuXHQgICAqIEBkZXNjcmlwdGlvblxyXG5cdCAgICogSW5pdGlhbGl6ZXMgUGFyc2UgRmFjZWJvb2sgaW50ZWdyYXRpb24uXHJcblx0ICAgKiBTZWUgW2BQYXJzZS5GYWNlYm9va1V0aWxzLmluaXRgXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLkZhY2Vib29rVXRpbHMuaHRtbCMuaW5pdH0uXHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgRmFjZWJvb2sgb3B0aW9ucyBhcmd1bWVudC5cclxuXHQgICAqIFNlZSBbYFBhcnNlLkZhY2Vib29rVXRpbHMuaW5pdGBde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvYXBpL3N5bWJvbHMvUGFyc2UuRmFjZWJvb2tVdGlscy5odG1sIy5pbml0fS5cclxuXHQgICAqL1xyXG5cdCAgcHJvdmlkZXIuaW5pdGlhbGl6ZSA9IHByb3ZpZGVyLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cdCAgICBQYXJzZS5GYWNlYm9va1V0aWxzLmluaXQob3B0aW9ucyk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBAbmdkb2Mgb2JqZWN0XHJcblx0ICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlRmFjZWJvb2tVdGlsc1xyXG5cdCAgICpcclxuXHQgICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXRpbHNcclxuXHQgICAqXHJcblx0ICAgKiBAZGVzY3JpcHRpb25cclxuXHQgICAqIFRoaXMgaXMgYSB3cmFwcGVyIGZvclxyXG5cdCAgICogW1BhcnNlLkZhY2Vib29rVXRpbHNde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvYXBpL3N5bWJvbHMvUGFyc2UuRmFjZWJvb2tVdGlscy5odG1sfS5cclxuXHQgICAqL1xyXG5cdCAgcHJvdmlkZXIuJGdldCA9IFBhcnNlRmFjZWJvb2tVdGlsc0ZhY3Rvcnk7XHJcblx0ICBQYXJzZUZhY2Vib29rVXRpbHNGYWN0b3J5LiRpbmplY3QgPSBbJ1BhcnNlVXRpbHMnXTtcclxuXHQgIGZ1bmN0aW9uIFBhcnNlRmFjZWJvb2tVdGlsc0ZhY3RvcnkoUGFyc2VVdGlscykge1xyXG5cdCAgICB2YXIgUGFyc2VGYWNlYm9va1V0aWxzID0gUGFyc2UuRmFjZWJvb2tVdGlscztcclxuXHRcclxuXHQgICAgWydsaW5rJywgJ2xvZ0luJywgJ3VubGluayddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG5cdCAgICAgIFBhcnNlRmFjZWJvb2tVdGlsc1tQYXJzZVV0aWxzLndyYXBQcmVmaXggKyBtZXRob2RdID0gUGFyc2VVdGlscy53cmFwKFBhcnNlRmFjZWJvb2tVdGlsc1ttZXRob2RdKTtcclxuXHQgICAgfSk7XHJcblx0XHJcblx0ICAgIHJldHVybiBQYXJzZUZhY2Vib29rVXRpbHM7XHJcblx0ICB9XHJcblx0fVxyXG5cdFxyXG5cdG5nUGFyc2VNb2R1bGVcclxuXHQgIC5wcm92aWRlcignUGFyc2VGYWNlYm9va1V0aWxzJywgUGFyc2VGYWNlYm9va1V0aWxzUHJvdmlkZXIpO1xyXG5cblxuLyoqKi8gfSxcbi8qIDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBQYXJzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMikuUGFyc2U7XHJcblx0dmFyIG5nUGFyc2VNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xyXG5cdF9fd2VicGFja19yZXF1aXJlX18oMyk7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQG5nZG9jIHNlcnZpY2VcclxuXHQgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlRmlsZVxyXG5cdCAqXHJcblx0ICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VVdGlsc1xyXG5cdCAqXHJcblx0ICogQGRlc2NyaXB0aW9uXHJcblx0ICogVGhpcyBpcyBhIHdyYXBwZXIgZm9yXHJcblx0ICogW1BhcnNlLlBhcnNlRmlsZV17QGxpbmsgaHR0cHM6Ly9wYXJzZS5jb20vZG9jcy9qcy9hcGkvc3ltYm9scy9QYXJzZS5GaWxlLmh0bWx9LlxyXG5cdCAqL1xyXG5cdFBhcnNlRmlsZUZhY3RvcnkuJGluamVjdCA9IFsnUGFyc2VVdGlscyddO1xyXG5cdGZ1bmN0aW9uIFBhcnNlRmlsZUZhY3RvcnkoUGFyc2VVdGlscykge1xyXG5cdCAgdmFyIFBhcnNlRmlsZSA9IFBhcnNlLkZpbGU7XHJcblx0XHJcblx0ICBbJ3NhdmUnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuXHQgICAgUGFyc2VGaWxlLnByb3RvdHlwZVtQYXJzZVV0aWxzLndyYXBQcmVmaXggKyBtZXRob2RdID0gUGFyc2VVdGlscy53cmFwKFBhcnNlRmlsZS5wcm90b3R5cGVbbWV0aG9kXSk7XHJcblx0ICB9KTtcclxuXHRcclxuXHQgIHJldHVybiBQYXJzZUZpbGU7XHJcblx0fVxyXG5cdFxyXG5cdG5nUGFyc2VNb2R1bGVcclxuXHQgIC5mYWN0b3J5KCdQYXJzZUZpbGUnLCBQYXJzZUZpbGVGYWN0b3J5KTtcclxuXG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgUGFyc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLlBhcnNlO1xyXG5cdHZhciBuZ1BhcnNlTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBuZ2RvYyBzZXJ2aWNlXHJcblx0ICogQG5hbWUgbmdQYXJzZS5QYXJzZU9iamVjdFxyXG5cdCAqXHJcblx0ICogQHJlcXVpcmVzICRyb290U2NvcGVcclxuXHQgKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZVV0aWxzXHJcblx0ICpcclxuXHQgKiBAZGVzY3JpcHRpb25cclxuXHQgKiBUaGlzIGlzIGEgd3JhcHBlciBmb3JcclxuXHQgKiBbUGFyc2UuT2JqZWN0XXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLk9iamVjdC5odG1sfS5cclxuXHQgKi9cclxuXHRQYXJzZU9iamVjdEZhY3RvcnkuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICdQYXJzZVV0aWxzJ107XHJcblx0ZnVuY3Rpb24gUGFyc2VPYmplY3RGYWN0b3J5KCRyb290U2NvcGUsIFBhcnNlVXRpbHMpIHtcclxuXHQgIHZhciBQYXJzZU9iamVjdCA9IFBhcnNlLk9iamVjdDtcclxuXHRcclxuXHQgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQYXJzZU9iamVjdC5wcm90b3R5cGUsICckaWQnLCB7XHJcblx0ICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgIHJldHVybiB0aGlzLiQkaWQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLiQkaWQgPT09IG51bGwgPyB0aGlzLmlkIDogdGhpcy4kJGlkO1xyXG5cdCAgICB9LFxyXG5cdCAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cdCAgICAgIHRoaXMuJCRpZCA9IHZhbHVlO1xyXG5cdCAgICB9LFxyXG5cdCAgICBjb25maWd1cmFibGU6IHRydWUsXHJcblx0ICAgIGVudW1lcmFibGU6IGZhbHNlXHJcblx0ICB9KTtcclxuXHRcclxuXHQgIFsnZGVzdHJveUFsbCcsICdmZXRjaEFsbCcsICdmZXRjaEFsbElmTmVlZGVkJywgJ3NhdmVBbGwnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuXHQgICAgUGFyc2VPYmplY3RbUGFyc2VVdGlscy53cmFwUHJlZml4ICsgbWV0aG9kXSA9IFBhcnNlVXRpbHMud3JhcChQYXJzZU9iamVjdFttZXRob2RdKTtcclxuXHQgIH0pO1xyXG5cdFxyXG5cdCAgWydkZXN0cm95JywgJ2ZldGNoJywgJ3NhdmUnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuXHQgICAgUGFyc2VPYmplY3QucHJvdG90eXBlW1BhcnNlVXRpbHMud3JhcFByZWZpeCArIG1ldGhvZF0gPSBQYXJzZVV0aWxzLndyYXAoUGFyc2VPYmplY3QucHJvdG90eXBlW21ldGhvZF0pO1xyXG5cdCAgfSk7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEBuZ2RvYyBtZXRob2RcclxuXHQgICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VPYmplY3QjJG9uXHJcblx0ICAgKiBAbWV0aG9kT2YgbmdQYXJzZS5QYXJzZU9iamVjdFxyXG5cdCAgICpcclxuXHQgICAqIEBkZXNjcmlwdGlvblxyXG5cdCAgICogQmluZCBldmVudC5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge09iamVjdH0gJHNjb3BlIEFuZ3VsYXIgJHNjb3BlLlxyXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSBFdmVudCBuYW1lLlxyXG5cdCAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXHJcblx0ICAgKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgQ2FsbGJhY2sgY29udGV4dC5cclxuXHQgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gVW5iaW5kIGZ1bmN0aW9uLlxyXG5cdCAgICovXHJcblx0ICBQYXJzZU9iamVjdC5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKCRzY29wZSwgZXZlbnROYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xyXG5cdCAgICBpZiAoISgkc2NvcGUgaW5zdGFuY2VvZiAkcm9vdFNjb3BlLmNvbnN0cnVjdG9yKSkgdGhyb3cgVHlwZUVycm9yKFwiJHNjb3BlIGlzIG5vdCBpbnN0YW5jZW9mIFNjb3BlXCIpO1xyXG5cdCAgICBpZiAodHlwZW9mIGV2ZW50TmFtZSAhPSAnc3RyaW5nJykgdGhyb3cgVHlwZUVycm9yKFwiZXZlbnROYW1lIGlzIG5vdCBzdHJpbmdcIik7XHJcblx0ICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGZ1bmN0aW9uXCIpO1xyXG5cdFxyXG5cdCAgICB2YXIgX2NhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuXHQgICAgICAkc2NvcGUuJGFwcGx5QXN5bmMoY2FsbGJhY2suYmluZChjb250ZXh0LCBhcmdzKSk7XHJcblx0ICAgIH07XHJcblx0XHJcblx0ICAgIHRoaXMub24oZXZlbnROYW1lLCBfY2FsbGJhY2ssIGNvbnRleHQpO1xyXG5cdFxyXG5cdCAgICB2YXIgb2ZmID0gdGhpcy5vZmYuYmluZCh0aGlzLCBldmVudE5hbWUsIF9jYWxsYmFjaywgY29udGV4dCk7XHJcblx0ICAgICRzY29wZS4kb24oJyRkZXN0cm95Jywgb2ZmKTtcclxuXHRcclxuXHQgICAgcmV0dXJuIG9mZjtcclxuXHQgIH07XHJcblx0XHJcblx0ICByZXR1cm4gUGFyc2VPYmplY3Q7XHJcblx0fVxyXG5cdFxyXG5cdG5nUGFyc2VNb2R1bGVcclxuXHQgIC5mYWN0b3J5KCdQYXJzZU9iamVjdCcsIFBhcnNlT2JqZWN0RmFjdG9yeSk7XHJcblxuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIFBhcnNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5QYXJzZTtcclxuXHR2YXIgbmdQYXJzZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAbmdkb2Mgc2VydmljZVxyXG5cdCAqIEBuYW1lIG5nUGFyc2UuUGFyc2VRdWVyeVxyXG5cdCAqXHJcblx0ICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VVdGlsc1xyXG5cdCAqXHJcblx0ICogQGRlc2NyaXB0aW9uXHJcblx0ICogVGhpcyBpcyBhIHdyYXBwZXIgZm9yXHJcblx0ICogW1BhcnNlLlBhcnNlUXVlcnlde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvYXBpL3N5bWJvbHMvUGFyc2UuUXVlcnkuaHRtbH0uXHJcblx0ICovXHJcblx0UGFyc2VRdWVyeUZhY3RvcnkuJGluamVjdCA9IFsnUGFyc2VVdGlscyddO1xyXG5cdGZ1bmN0aW9uIFBhcnNlUXVlcnlGYWN0b3J5KFBhcnNlVXRpbHMpIHtcclxuXHQgIHZhciBQYXJzZVF1ZXJ5ID0gUGFyc2UuUXVlcnk7XHJcblx0XHJcblx0ICBbJ2NvdW50JywgJ2ZpbmQnLCAnZmlyc3QnLCAnZ2V0J10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XHJcblx0ICAgIFBhcnNlUXVlcnkucHJvdG90eXBlW1BhcnNlVXRpbHMud3JhcFByZWZpeCArIG1ldGhvZF0gPSBQYXJzZVV0aWxzLndyYXAoUGFyc2VRdWVyeS5wcm90b3R5cGVbbWV0aG9kXSk7XHJcblx0ICB9KTtcclxuXHRcclxuXHQgIHJldHVybiBQYXJzZVF1ZXJ5O1xyXG5cdH1cclxuXHRcclxuXHRuZ1BhcnNlTW9kdWxlXHJcblx0ICAuZmFjdG9yeSgnUGFyc2VRdWVyeScsIFBhcnNlUXVlcnlGYWN0b3J5KTtcclxuXG5cbi8qKiovIH0sXG4vKiAxMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIFBhcnNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5QYXJzZTtcclxuXHR2YXIgbmdQYXJzZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBuZ2RvYyBvYmplY3RcclxuXHQgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlVXNlclByb3ZpZGVyXHJcblx0ICpcclxuXHQgKiBAZGVzY3JpcHRpb25cclxuXHQgKiBQcm92aWRlciBmb3IgUGFyc2VVc2VyIHNlcnZpY2UuXHJcblx0ICovXHJcblx0UGFyc2VVc2VyUHJvdmlkZXIuJGluamVjdCA9IFtdO1xyXG5cdGZ1bmN0aW9uIFBhcnNlVXNlclByb3ZpZGVyKCkge1xyXG5cdCAgdmFyIHByb3ZpZGVyID0gdGhpcztcclxuXHQgIHByb3ZpZGVyLlVzZXIgPSBQYXJzZS5Vc2VyO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBAbmdkb2MgcHJvcGVydHlcclxuXHQgICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VVc2VyUHJvdmlkZXIjJGF0dHJpYnV0ZXNcclxuXHQgICAqIEBwcm9wZXJ0eU9mIG5nUGFyc2UuUGFyc2VVc2VyUHJvdmlkZXJcclxuXHQgICAqXHJcblx0ICAgKiBAZGVzY3JpcHRpb25cclxuXHQgICAqIFRoZSBuYW1lcyBvZiB0aGUgYXR0cmlidXRlcyB0byBjcmVhdGUgZ2V0dGVycyBhbmQgc2V0dGVycy5cclxuXHQgICAqL1xyXG5cdCAgcHJvdmlkZXIuJGF0dHJpYnV0ZXMgPSBbXTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQG5nZG9jIG1ldGhvZFxyXG5cdCAgICogQG5hbWUgbmdQYXJzZS5QYXJzZVVzZXJQcm92aWRlciNyZWdpc3RlclxyXG5cdCAgICogQG1ldGhvZE9mIG5nUGFyc2UuUGFyc2VVc2VyUHJvdmlkZXJcclxuXHQgICAqXHJcblx0ICAgKiBAZGVzY3JpcHRpb25cclxuXHQgICAqIENoZWNrcyB3aGV0aGVyIHRoaXMgdXNlciBpcyB0aGUgY3VycmVudCB1c2VyIGFuZCBoYXMgYmVlbiBhdXRoZW50aWNhdGVkLlxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci5hdXRoZW50aWNhdGVkID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICByZXR1cm4gQm9vbGVhbihQYXJzZS5Vc2VyLmN1cnJlbnQoKSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBAbmdkb2MgbWV0aG9kXHJcblx0ICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlVXNlclByb3ZpZGVyI2RlZmluZUF0dHJpYnV0ZXNcclxuXHQgICAqIEBtZXRob2RPZiBuZ1BhcnNlLlBhcnNlVXNlclByb3ZpZGVyXHJcblx0ICAgKlxyXG5cdCAgICogQGRlc2NyaXB0aW9uXHJcblx0ICAgKiBEZWZpbmVzIGF0dHJpYnV0ZXMgZm9yIFBhcnNlLlVzZXIuXHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHsuLi5TdHJpbmd8U3RyaW5nW119IGF0dHJpYnV0ZXMgQ2xhc3MgbmFtZXMgZm9yIHJlZ2lzdHJhdGlvbi5cclxuXHQgICAqL1xyXG5cdCAgcHJvdmlkZXIuZGVmaW5lQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XHJcblx0ICAgIGlmICghKGF0dHJpYnV0ZXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuXHQgICAgICBhdHRyaWJ1dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICBwcm92aWRlci4kYXR0cmlidXRlcy5wdXNoLmFwcGx5KHByb3ZpZGVyLiRhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVzKTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEBuZ2RvYyBzZXJ2aWNlXHJcblx0ICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlVXNlclxyXG5cdCAgICpcclxuXHQgICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXRpbHNcclxuXHQgICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlQ2xhc3NcclxuXHQgICAqXHJcblx0ICAgKiBAZGVzY3JpcHRpb25cclxuXHQgICAqIFRoaXMgaXMgYSB3cmFwcGVyIGZvclxyXG5cdCAgICogW1BhcnNlLlBhcnNlVXNlcl17QGxpbmsgaHR0cHM6Ly9wYXJzZS5jb20vZG9jcy9qcy9hcGkvc3ltYm9scy9QYXJzZS5Vc2VyLmh0bWx9LlxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci4kZ2V0ID0gUGFyc2VVc2VyRmFjdG9yeTtcclxuXHQgIFBhcnNlVXNlckZhY3RvcnkuJGluamVjdCA9IFsnUGFyc2VVdGlscycsICdQYXJzZUNsYXNzJ107XHJcblx0ICBmdW5jdGlvbiBQYXJzZVVzZXJGYWN0b3J5KFBhcnNlVXRpbHMsIFBhcnNlQ2xhc3MpIHtcclxuXHQgICAgdmFyIFBhcnNlVXNlciA9IFBhcnNlLlVzZXI7XHJcblx0XHJcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFBhcnNlVXNlci5wcm90b3R5cGUsIHtcclxuXHQgICAgICB1c2VybmFtZToge1xyXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgIHJldHVybiB0aGlzLmdldFVzZXJuYW1lKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHQgICAgICAgICAgdGhpcy5zZXRVc2VybmFtZSh2YWx1ZSk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxyXG5cdCAgICAgIH0sXHJcblx0ICAgICAgcGFzc3dvcmQ6IHtcclxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ3Bhc3N3b3JkJyk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHQgICAgICAgICAgdGhpcy5zZXRQYXNzd29yZCh2YWx1ZSk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxyXG5cdCAgICAgIH0sXHJcblx0ICAgICAgZW1haWw6IHtcclxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5nZXRFbWFpbCgpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgICAgICAgIHRoaXMuc2V0RW1haWwodmFsdWUpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWVcclxuXHQgICAgICB9XHJcblx0ICAgIH0pO1xyXG5cdFxyXG5cdCAgICBbJ2JlY29tZScsICdlbmFibGVSZXZvY2FibGVTZXNzaW9uJywgJ2xvZ0luJywgJ2xvZ091dCcsICdyZXF1ZXN0UGFzc3dvcmRSZXNldCcsICdzaWduVXAnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuXHQgICAgICBQYXJzZVVzZXJbUGFyc2VVdGlscy53cmFwUHJlZml4ICsgbWV0aG9kXSA9IFBhcnNlVXRpbHMud3JhcChQYXJzZVVzZXJbbWV0aG9kXSk7XHJcblx0ICAgIH0pO1xyXG5cdFxyXG5cdCAgICBbJ2xvZ0luJywgJ3NpZ25VcCddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG5cdCAgICAgIFBhcnNlVXNlci5wcm90b3R5cGVbUGFyc2VVdGlscy53cmFwUHJlZml4ICsgbWV0aG9kXSA9IFBhcnNlVXRpbHMud3JhcChQYXJzZVVzZXIucHJvdG90eXBlW21ldGhvZF0pO1xyXG5cdCAgICB9KTtcclxuXHRcclxuXHQgICAgUGFyc2VDbGFzcy5kZWZpbmVBdHRyaWJ1dGVzKFBhcnNlVXNlciwgcHJvdmlkZXIuJGF0dHJpYnV0ZXMpO1xyXG5cdFxyXG5cdCAgICBQYXJzZUNsYXNzLiRjbGFzc2VzWydQYXJzZVVzZXInXSA9IFBhcnNlVXNlcjtcclxuXHRcclxuXHQgICAgcmV0dXJuIFBhcnNlVXNlcjtcclxuXHQgIH1cclxuXHR9XHJcblx0XHJcblx0bmdQYXJzZU1vZHVsZVxyXG5cdCAgLnByb3ZpZGVyKCdQYXJzZVVzZXInLCBQYXJzZVVzZXJQcm92aWRlcik7XHJcblxuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gd2luZG93LmFuZ3VsYXI7XG5cbi8qKiovIH0sXG4vKiAxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIFBhcnNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5QYXJzZTtcclxuXHR2YXIgbmdQYXJzZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cdF9fd2VicGFja19yZXF1aXJlX18oNik7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xyXG5cdF9fd2VicGFja19yZXF1aXJlX18oOSk7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XHJcblx0X193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAbmdkb2Mgb2JqZWN0XHJcblx0ICogQG5hbWUgbmdQYXJzZS5QYXJzZVByb3ZpZGVyXHJcblx0ICpcclxuXHQgKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZUNsYXNzUHJvdmlkZXJcclxuXHQgKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlclxyXG5cdCAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXNlclByb3ZpZGVyXHJcblx0ICpcclxuXHQgKiBAZGVzY3JpcHRpb25cclxuXHQgKiBQcm92aWRlciBmb3IgUGFyc2Ugc2VydmljZS5cclxuXHQgKi9cclxuXHRQYXJzZVByb3ZpZGVyLiRpbmplY3QgPSBbJ1BhcnNlQ2xhc3NQcm92aWRlcicsICdQYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlcicsICdQYXJzZVVzZXJQcm92aWRlciddO1xyXG5cdGZ1bmN0aW9uIFBhcnNlUHJvdmlkZXIoUGFyc2VDbGFzc1Byb3ZpZGVyLCBQYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlciwgUGFyc2VVc2VyUHJvdmlkZXIpIHtcclxuXHQgIHZhciBwcm92aWRlciA9IHRoaXM7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEBuZ2RvYyBwcm9wZXJ0eVxyXG5cdCAgICogQG5hbWUgbmdQYXJzZS5QYXJzZVByb3ZpZGVyI1BhcnNlXHJcblx0ICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlUHJvdmlkZXJcclxuXHQgICAqL1xyXG5cdCAgcHJvdmlkZXIuUGFyc2UgPSBQYXJzZTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQG5nZG9jIHByb3BlcnR5XHJcblx0ICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlUHJvdmlkZXIjQ2xhc3NcclxuXHQgICAqIEBwcm9wZXJ0eU9mIG5nUGFyc2UuUGFyc2VQcm92aWRlclxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci5DbGFzcyA9IFBhcnNlQ2xhc3NQcm92aWRlcjtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQG5nZG9jIHByb3BlcnR5XHJcblx0ICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlUHJvdmlkZXIjRmFjZWJvb2tVdGlsc1xyXG5cdCAgICogQHByb3BlcnR5T2YgbmdQYXJzZS5QYXJzZVByb3ZpZGVyXHJcblx0ICAgKi9cclxuXHQgIHByb3ZpZGVyLkZhY2Vib29rVXRpbHMgPSBQYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlcjtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQG5nZG9jIHByb3BlcnR5XHJcblx0ICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlUHJvdmlkZXIjVXNlclxyXG5cdCAgICogQHByb3BlcnR5T2YgbmdQYXJzZS5QYXJzZVByb3ZpZGVyXHJcblx0ICAgKi9cclxuXHQgIHByb3ZpZGVyLlVzZXIgPSBQYXJzZVVzZXJQcm92aWRlcjtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQG5nZG9jIG1ldGhvZFxyXG5cdCAgICogQG5hbWUgbmdQYXJzZS5QYXJzZVByb3ZpZGVyI2luaXRpYWxpemVcclxuXHQgICAqIEBtZXRob2RPZiBuZ1BhcnNlLlBhcnNlUHJvdmlkZXJcclxuXHQgICAqXHJcblx0ICAgKiBAZGVzY3JpcHRpb25cclxuXHQgICAqIEluaXRpYWxpemVzIFBhcnNlLlxyXG5cdCAgICogU2VlIFtQYXJzZS5pbml0aWFsaXplXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLmh0bWwjLmluaXRpYWxpemV9LlxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB7U3RyaW5nfSBhcHBsaWNhdGlvbklkIFlvdXIgUGFyc2UgQXBwbGljYXRpb24gSUQuXHJcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gamF2YVNjcmlwdEtleSBZb3VyIFBhcnNlIEphdmFTY3JpcHQgS2V5LlxyXG5cdCAgICovXHJcblx0ICBwcm92aWRlci5pbml0aWFsaXplID0gZnVuY3Rpb24gKGFwcGxpY2F0aW9uSWQsIGphdmFTY3JpcHRLZXkpIHtcclxuXHQgICAgUGFyc2UuaW5pdGlhbGl6ZShhcHBsaWNhdGlvbklkLCBqYXZhU2NyaXB0S2V5KTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEBuZ2RvYyBvYmplY3RcclxuXHQgICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VcclxuXHQgICAqXHJcblx0ICAgKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZUNsYXNzXHJcblx0ICAgKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZUNsb3VkXHJcblx0ICAgKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNcclxuXHQgICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlRmlsZVxyXG5cdCAgICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VPYmplY3RcclxuXHQgICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlUXVlcnlcclxuXHQgICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXNlclxyXG5cdCAgICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VVdGlsc1xyXG5cdCAgICpcclxuXHQgICAqIEBkZXNjcmlwdGlvblxyXG5cdCAgICogVGhpcyBpcyBhIHdyYXBwZXIgZm9yIFtQYXJzZV17QGxpbmsgaHR0cHM6Ly9wYXJzZS5jb20vZG9jcy9qcy9hcGkvc3ltYm9scy9QYXJzZS5odG1sfS5cclxuXHQgICAqL1xyXG5cdCAgcHJvdmlkZXIuJGdldCA9IFBhcnNlRmFjdG9yeTtcclxuXHQgIFBhcnNlRmFjdG9yeS4kaW5qZWN0ID0gW1xyXG5cdCAgICAnUGFyc2VDbGFzcycsXHJcblx0ICAgICdQYXJzZUNsb3VkJyxcclxuXHQgICAgJ1BhcnNlRmFjZWJvb2tVdGlscycsXHJcblx0ICAgICdQYXJzZUZpbGUnLFxyXG5cdCAgICAnUGFyc2VPYmplY3QnLFxyXG5cdCAgICAnUGFyc2VRdWVyeScsXHJcblx0ICAgICdQYXJzZVVzZXInLFxyXG5cdCAgICAnUGFyc2VVdGlscydcclxuXHQgIF07XHJcblx0ICBmdW5jdGlvbiBQYXJzZUZhY3RvcnkoKSB7XHJcblx0ICAgIHJldHVybiBQYXJzZTtcclxuXHQgIH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQG5nZG9jIGZ1bmN0aW9uXHJcblx0ICogQG5hbWUgaW5pdFxyXG5cdCAqXHJcblx0ICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VcclxuXHQgKlxyXG5cdCAqIEBkZXNjcmlwdGlvblxyXG5cdCAqIEluaXRpYWxpemVzIG5nUGFyc2UuXHJcblx0ICovXHJcblx0aW5pdC4kaW5qZWN0ID0gWydQYXJzZSddO1xyXG5cdGZ1bmN0aW9uIGluaXQoKSB7XHJcblx0fVxyXG5cdFxyXG5cdG5nUGFyc2VNb2R1bGVcclxuXHQgIC5wcm92aWRlcignUGFyc2UnLCBQYXJzZVByb3ZpZGVyKVxyXG5cdCAgLnJ1bihpbml0KTtcclxuXG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlcixcclxuXHQgKiBmcm9tIGFsbCBvZiB0aGUgcHJvdmlkZWQgYXJyYXlzLlxyXG5cdCAqIEBwYXJhbSB7QXJyYXk9fSBkc3QgRGVzdGluYXRpb24gYXJyYXkuXHJcblx0ICogQHBhcmFtIHsuLi5BcnJheT19IHNyYyBTb3VyY2UgYXJyYXlzLlxyXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gRGVzdGluYXRpb24gYXJyYXkuXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gdW5pb24oZHN0LCBzcmMpIHtcclxuXHQgIGRzdCA9IGFuZ3VsYXIuaXNBcnJheShhcmd1bWVudHNbMF0pICYmIGFyZ3VtZW50c1swXSB8fCBbXTtcclxuXHQgIHNyYyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblx0XHJcblx0ICBmb3IgKHZhciBpID0gMCwgc3JjTGVuZ3RoID0gc3JjLmxlbmd0aCwgYXJyOyBpIDwgc3JjTGVuZ3RoOyBpKyspIHtcclxuXHQgICAgYXJyID0gc3JjW2ldO1xyXG5cdCAgICBpZiAoIWFuZ3VsYXIuaXNBcnJheShhcnIpKSBjb250aW51ZTtcclxuXHQgICAgZm9yICh2YXIgaiA9IDAsIGFyckxlbmd0aCA9IGFyci5sZW5ndGgsIHZhbDsgaiA8IGFyckxlbmd0aDsgaisrKSB7XHJcblx0ICAgICAgdmFsID0gYXJyW2pdO1xyXG5cdCAgICAgIGlmIChkc3QuaW5kZXhPZih2YWwpID09IC0xKSBkc3QucHVzaCh2YWwpO1xyXG5cdCAgICB9XHJcblx0ICB9XHJcblx0XHJcblx0ICByZXR1cm4gZHN0O1xyXG5cdH1cclxuXHRcclxuXHRtb2R1bGUuZXhwb3J0cy51bmlvbiA9IHVuaW9uO1xyXG5cblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogYW5ndWxhci1wYXJzZS5qc1xuICoqLyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgMTlmNmQxMzM4OGJlMWFhZWQyZGJcbiAqKi8iLCJyZXF1aXJlKCdwYXJzZScpO1xyXG5yZXF1aXJlKCcuL1BhcnNlLmpzJyk7XHJcbnJlcXVpcmUoJy4vUGFyc2VDbGFzcy5qcycpO1xyXG5yZXF1aXJlKCcuL1BhcnNlQ2xvdWQuanMnKTtcclxucmVxdWlyZSgnLi9QYXJzZUZhY2Vib29rVXRpbHMnKTtcclxucmVxdWlyZSgnLi9QYXJzZUZpbGUnKTtcclxucmVxdWlyZSgnLi9QYXJzZU9iamVjdC5qcycpO1xyXG5yZXF1aXJlKCcuL1BhcnNlUXVlcnkuanMnKTtcclxucmVxdWlyZSgnLi9QYXJzZVVzZXIuanMnKTtcclxucmVxdWlyZSgnLi9QYXJzZVV0aWxzLmpzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlLmpzJykubmFtZTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvdmVydmlld1xyXG4gKiBAbmFtZSBuZ1BhcnNlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBbmd1bGFyIHdyYXBwZXIgZm9yIFtQYXJzZS5jb20gSmF2YVNjcmlwdCBTREtde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvZ3VpZGV9LlxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhbmd1bGFyLm1vZHVsZSgnbmdQYXJzZScsIFtdKTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5QYXJzZSAmJiB3aW5kb3c7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCBcIndpbmRvdy5QYXJzZSAmJiB3aW5kb3dcIlxuICoqIG1vZHVsZSBpZCA9IDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBuZ1BhcnNlTW9kdWxlID0gcmVxdWlyZSgnLi9tb2R1bGUuanMnKTtcclxuXHJcblBhcnNlVXRpbHNQcm92aWRlci4kaW5qZWN0ID0gW107XHJcbmZ1bmN0aW9uIFBhcnNlVXRpbHNQcm92aWRlcigpIHtcclxuICB2YXIgcHJvdmlkZXIgPSB0aGlzO1xyXG5cclxuICBwcm92aWRlci53cmFwUHJlZml4ID0gJyc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBvYmplY3RcclxuICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlVXRpbHNcclxuICAgKlxyXG4gICAqIEByZXF1aXJlcyAkcVxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogUGFyc2UgVXRpbHMuXHJcbiAgICovXHJcbiAgUGFyc2VVdGlsc1NlcnZpY2UuJGluamVjdCA9IFsnJHEnXTtcclxuICBwcm92aWRlci4kZ2V0ID0gUGFyc2VVdGlsc1NlcnZpY2U7XHJcbiAgZnVuY3Rpb24gUGFyc2VVdGlsc1NlcnZpY2UoJHEpIHtcclxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXJzZVV0aWxzU2VydmljZSkpIHJldHVybiBuZXcgUGFyc2VVdGlsc1NlcnZpY2UoJHEpO1xyXG5cclxuICAgIHRoaXMud3JhcFByZWZpeCA9IHByb3ZpZGVyLndyYXBQcmVmaXg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlVXRpbHMjd3JhcFxyXG4gICAgICogQG1ldGhvZE9mIG5nUGFyc2UuUGFyc2VVdGlsc1xyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogV3JhcCBmdW5jdGlvbiB0aGF0IHJldHVybnNcclxuICAgICAqIFtQYXJzZS5Qcm9taXNlXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLlByb21pc2UuaHRtbH1cclxuICAgICAqIGludG8gZnVuY3Rpb24gdGhhdCByZXR1cm5zICRxIHByb21pc2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBGdW5jdGlvbiB0aGF0IHJldHVybnNcclxuICAgICAqIFtQYXJzZS5Qcm9taXNlXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLlByb21pc2UuaHRtbH0uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IHJldHVybnMgJHEgcHJvbWlzZS5cclxuICAgICAqL1xyXG4gICAgdGhpcy53cmFwID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIHJldHVybiAkcShwcm9taXNlLnRoZW4uYmluZChwcm9taXNlKSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxubmdQYXJzZU1vZHVsZVxyXG4gIC5wcm92aWRlcignUGFyc2VVdGlscycsIFBhcnNlVXRpbHNQcm92aWRlcik7XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvUGFyc2VVdGlscy5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZScpLlBhcnNlO1xyXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XHJcbnZhciBuZ1BhcnNlTW9kdWxlID0gcmVxdWlyZSgnLi9tb2R1bGUuanMnKTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgb2JqZWN0XHJcbiAqIEBuYW1lIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQcm92aWRlciBmb3IgUGFyc2VDbGFzcyBzZXJ2aWNlLlxyXG4gKi9cclxuUGFyc2VDbGFzc1Byb3ZpZGVyLiRpbmplY3QgPSBbXTtcclxuZnVuY3Rpb24gUGFyc2VDbGFzc1Byb3ZpZGVyKCkge1xyXG4gIHZhciBwcm92aWRlciA9IHRoaXM7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxyXG4gICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyIyRjbGFzc2VzXHJcbiAgICogQHByb3BlcnR5T2YgbmdQYXJzZS5QYXJzZUNsYXNzUHJvdmlkZXJcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIENsYXNzIG5hbWVzIGZvciByZWdpc3RyYXRpb24uXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuJGNsYXNzZXMgPSB7fTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIHByb3BlcnR5XHJcbiAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUNsYXNzUHJvdmlkZXIjJGF0dHJpYnV0ZXNcclxuICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlQ2xhc3NQcm92aWRlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogVGhlIG5hbWVzIG9mIHRoZSBhdHRyaWJ1dGVzIHRvIGNyZWF0ZSBnZXR0ZXJzIGFuZCBzZXR0ZXJzLlxyXG4gICAqL1xyXG4gIHByb3ZpZGVyLiRhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlQ2xhc3NQcm92aWRlciNyZWdpc3RlclxyXG4gICAqIEBtZXRob2RPZiBuZ1BhcnNlLlBhcnNlQ2xhc3NQcm92aWRlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogUmVnaXN0ZXIgZmFjdG9yaWVzLCB3aGljaCBjcmVhdGUgUGFyc2UgY2xhc3Nlcy5cclxuICAgKiBJdCBtYXkgYmUgaGVscGZ1bCB0byBJbml0aWFsaXplIFBhcnNlIGNsYXNzZXMgYmVmb3JlIHVzaW5nLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd8U3RyaW5nW119IGNsYXNzZXMgQ2xhc3MgbmFtZXMgZm9yIHJlZ2lzdHJhdGlvbi5cclxuICAgKi9cclxuICBwcm92aWRlci5yZWdpc3RlciA9IGZ1bmN0aW9uIChjbGFzc2VzKSB7XHJcbiAgICBpZiAoIWFuZ3VsYXIuaXNBcnJheShjbGFzc2VzKSkge1xyXG4gICAgICBjbGFzc2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gY2xhc3Nlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICBwcm92aWRlci4kY2xhc3Nlc1tjbGFzc2VzW2ldXSA9IGNsYXNzZXNbaV07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyI2RlZmluZUF0dHJpYnV0ZXNcclxuICAgKiBAbWV0aG9kT2YgbmdQYXJzZS5QYXJzZUNsYXNzUHJvdmlkZXJcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIERlZmluZXMgYXR0cmlidXRlcyBmb3IgYWxsIGNsYXNzZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ3xTdHJpbmdbXX0gYXR0cmlidXRlcyBDbGFzcyBuYW1lcyBmb3IgcmVnaXN0cmF0aW9uLlxyXG4gICAqL1xyXG4gIHByb3ZpZGVyLmRlZmluZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoYXR0cmlidXRlcykge1xyXG4gICAgaWYgKCFhbmd1bGFyLmlzQXJyYXkoYXR0cmlidXRlcykpIHtcclxuICAgICAgYXR0cmlidXRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXRpbHMudW5pb24ocHJvdmlkZXIuJGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXHJcbiAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUNsYXNzXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBUaGlzIGlzIGEgd3JhcHBlciBmb3JcclxuICAgKiBbYFBhcnNlLk9iamVjdC5leHRlbmRgXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLk9iamVjdC5odG1sIy5leHRlbmR9LlxyXG4gICAqIENyZWF0ZXMgYSBuZXcgc3ViY2xhc3Mgb2YgUGFyc2UuT2JqZWN0IGZvciB0aGUgZ2l2ZW4gUGFyc2UgY2xhc3MgbmFtZS5cclxuICAgKi9cclxuICBwcm92aWRlci4kZ2V0ID0gUGFyc2VDbGFzc0ZhY3Rvcnk7XHJcbiAgUGFyc2VDbGFzc0ZhY3RvcnkuJGluamVjdCA9IFtdO1xyXG4gIGZ1bmN0aW9uIFBhcnNlQ2xhc3NGYWN0b3J5KCkge1xyXG4gICAgdmFyIGV4dGVuZCA9IFBhcnNlLk9iamVjdC5leHRlbmQ7XHJcblxyXG4gICAgZnVuY3Rpb24gUGFyc2VDbGFzcyhjbGFzc05hbWUsIHByb3RvUHJvcHMsIGNsYXNzUHJvcHMpIHtcclxuICAgICAgcHJvdG9Qcm9wcyA9IE9iamVjdChwcm90b1Byb3BzKTtcclxuXHJcbiAgICAgIHZhciBwYXJzZUNsYXNzID0gZXh0ZW5kLmNhbGwoUGFyc2UuT2JqZWN0LCBjbGFzc05hbWUsIHByb3RvUHJvcHMsIGNsYXNzUHJvcHMpO1xyXG4gICAgICB2YXIgYXR0cmlidXRlcyA9IGFuZ3VsYXIuaXNBcnJheShwcm90b1Byb3BzLiRhdHRyaWJ1dGVzKSA/IHByb3RvUHJvcHMuJGF0dHJpYnV0ZXMgOiBbXTtcclxuXHJcbiAgICAgIGRlZmluZUF0dHJpYnV0ZXMocGFyc2VDbGFzcywgYXR0cmlidXRlcyk7XHJcblxyXG4gICAgICByZXR1cm4gcGFyc2VDbGFzcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VDbGFzcyNkZWZpbmVBdHRyaWJ1dGVzXHJcbiAgICAgKiBAbWV0aG9kT2YgbmdQYXJzZS5QYXJzZUNsYXNzXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBEZWZpbmVzIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBjbGFzcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gQ2xhc3MgU3ViY2xhc3Mgb2YgUGFyc2UuT2JqZWN0LlxyXG4gICAgICogQHBhcmFtIHsuLi5TdHJpbmd8U3RyaW5nW119IGF0dHJpYnV0ZXMgQXR0cmlidXRlIG5hbWVzLlxyXG4gICAgICovXHJcbiAgICBQYXJzZUNsYXNzLmRlZmluZUF0dHJpYnV0ZXMgPSBkZWZpbmVBdHRyaWJ1dGVzO1xyXG4gICAgZnVuY3Rpb24gZGVmaW5lQXR0cmlidXRlcyhDbGFzcywgYXR0cmlidXRlcykge1xyXG4gICAgICBpZiAoIWFuZ3VsYXIuaXNBcnJheShhdHRyaWJ1dGVzKSkge1xyXG4gICAgICAgIGF0dHJpYnV0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBDbGFzcy4kYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgQ2xhc3MuZGVmaW5lQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmlzQXJyYXkoYXR0cmlidXRlcykpIHtcclxuICAgICAgICAgIGF0dHJpYnV0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXR0cmlidXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGFzcy5wcm90b3R5cGUsIGF0dHJpYnV0ZSwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICB0aGlzLnNldChhdHRyaWJ1dGUsIHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdXRpbHMudW5pb24oQ2xhc3MuJGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgQ2xhc3MuZGVmaW5lQXR0cmlidXRlcyhwcm92aWRlci4kYXR0cmlidXRlcyk7XHJcbiAgICAgIENsYXNzLmRlZmluZUF0dHJpYnV0ZXMoYXR0cmlidXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgcHJvcGVydHlcclxuICAgICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyIyRjbGFzc2VzXHJcbiAgICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlQ2xhc3NcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFJlZ2lzdGVyZWQgY2xhc3Nlcy5cclxuICAgICAqL1xyXG4gICAgUGFyc2VDbGFzcy4kY2xhc3NlcyA9IHByb3ZpZGVyLiRjbGFzc2VzO1xyXG5cclxuICAgIFBhcnNlLkNsYXNzID0gUGFyc2VDbGFzcztcclxuXHJcbiAgICByZXR1cm4gUGFyc2VDbGFzcztcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgaW5pdFxyXG4gKlxyXG4gKiBAcmVxdWlyZXMgJGluamVjdG9yXHJcbiAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlQ2xhc3NcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEluaXRpYWxpemVzIHJlZ2lzdGVyZWQgY2xhc3Nlcy5cclxuICovXHJcbmluaXQuJGluamVjdCA9IFsnJGluamVjdG9yJywgJ1BhcnNlQ2xhc3MnXTtcclxuZnVuY3Rpb24gaW5pdCgkaW5qZWN0b3IsIFBhcnNlQ2xhc3MpIHtcclxuICBmb3IgKHZhciBpIGluIFBhcnNlQ2xhc3MuJGNsYXNzZXMpIHtcclxuICAgIGlmICghUGFyc2VDbGFzcy4kY2xhc3Nlcy5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XHJcbiAgICBpZiAodHlwZW9mIFBhcnNlQ2xhc3MuJGNsYXNzZXNbaV0gIT0gJ3N0cmluZycpIGNvbnRpbnVlO1xyXG4gICAgUGFyc2VDbGFzcy4kY2xhc3Nlc1tpXSA9ICRpbmplY3Rvci5nZXQoaSk7XHJcbiAgfVxyXG59XHJcblxyXG5uZ1BhcnNlTW9kdWxlXHJcbiAgLnByb3ZpZGVyKCdQYXJzZUNsYXNzJywgUGFyc2VDbGFzc1Byb3ZpZGVyKVxyXG4gIC5ydW4oaW5pdCk7XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvUGFyc2VDbGFzcy5qc1xuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBQYXJzZSA9IHJlcXVpcmUoJ3BhcnNlJykuUGFyc2U7XHJcbnZhciBuZ1BhcnNlTW9kdWxlID0gcmVxdWlyZSgnLi9tb2R1bGUuanMnKTtcclxucmVxdWlyZSgnLi9QYXJzZVV0aWxzLmpzJyk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZ1BhcnNlLlBhcnNlQ2xvdWRcclxuICpcclxuICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VVdGlsc1xyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBpcyBhIHdyYXBwZXIgZm9yXHJcbiAqIFtQYXJzZS5DbG91ZF17QGxpbmsgaHR0cHM6Ly9wYXJzZS5jb20vZG9jcy9qcy9hcGkvc3ltYm9scy9QYXJzZS5DbG91ZC5odG1sfS5cclxuICovXHJcblBhcnNlQ2xvdWRGYWN0b3J5LiRpbmplY3QgPSBbJ1BhcnNlVXRpbHMnXTtcclxuZnVuY3Rpb24gUGFyc2VDbG91ZEZhY3RvcnkoUGFyc2VVdGlscykge1xyXG4gIHZhciBQYXJzZUNsb3VkID0gUGFyc2UuQ2xvdWQ7XHJcblxyXG4gIFsncnVuJ10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XHJcbiAgICBQYXJzZUNsb3VkW1BhcnNlVXRpbHMud3JhcFByZWZpeCArIG1ldGhvZF0gPSBQYXJzZVV0aWxzLndyYXAoUGFyc2VDbG91ZFttZXRob2RdKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIFBhcnNlQ2xvdWQ7XHJcbn1cclxuXHJcbm5nUGFyc2VNb2R1bGVcclxuICAuZmFjdG9yeSgnUGFyc2VDbG91ZCcsIFBhcnNlQ2xvdWRGYWN0b3J5KTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9QYXJzZUNsb3VkLmpzXG4gKiogbW9kdWxlIGlkID0gNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2UnKS5QYXJzZTtcclxudmFyIG5nUGFyc2VNb2R1bGUgPSByZXF1aXJlKCcuL21vZHVsZS5qcycpO1xyXG5yZXF1aXJlKCcuL1BhcnNlVXRpbHMuanMnKTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgb2JqZWN0XHJcbiAqIEBuYW1lIG5nUGFyc2UuUGFyc2VGYWNlYm9va1V0aWxzUHJvdmlkZXJcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFByb3ZpZGVyIGZvciBQYXJzZUZhY2Vib29rVXRpbHMgc2VydmljZS5cclxuICovXHJcblBhcnNlRmFjZWJvb2tVdGlsc1Byb3ZpZGVyLiRpbmplY3QgPSBbXTtcclxuZnVuY3Rpb24gUGFyc2VGYWNlYm9va1V0aWxzUHJvdmlkZXIoKSB7XHJcbiAgdmFyIHByb3ZpZGVyID0gdGhpcztcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIHByb3BlcnR5XHJcbiAgICogQG5hbWUgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlciNGYWNlYm9va1V0aWxzXHJcbiAgICogQHByb3BlcnR5T2YgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogU2VlIFtGYWNlYm9va1V0aWxzXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLkZhY2Vib29rVXRpbHMuaHRtbH1cclxuICAgKi9cclxuICBwcm92aWRlci5GYWNlYm9va1V0aWxzID0gUGFyc2UuRmFjZWJvb2tVdGlscztcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VGYWNlYm9va1V0aWxzUHJvdmlkZXIjaW5pdGlhbGl6ZVxyXG4gICAqIEBhbGlhcyBuZ1BhcnNlLlBhcnNlRmFjZWJvb2tVdGlsc1Byb3ZpZGVyI2luaXRcclxuICAgKiBAbWV0aG9kT2YgbmdQYXJzZS5QYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogSW5pdGlhbGl6ZXMgUGFyc2UgRmFjZWJvb2sgaW50ZWdyYXRpb24uXHJcbiAgICogU2VlIFtgUGFyc2UuRmFjZWJvb2tVdGlscy5pbml0YF17QGxpbmsgaHR0cHM6Ly9wYXJzZS5jb20vZG9jcy9qcy9hcGkvc3ltYm9scy9QYXJzZS5GYWNlYm9va1V0aWxzLmh0bWwjLmluaXR9LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgRmFjZWJvb2sgb3B0aW9ucyBhcmd1bWVudC5cclxuICAgKiBTZWUgW2BQYXJzZS5GYWNlYm9va1V0aWxzLmluaXRgXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLkZhY2Vib29rVXRpbHMuaHRtbCMuaW5pdH0uXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuaW5pdGlhbGl6ZSA9IHByb3ZpZGVyLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgUGFyc2UuRmFjZWJvb2tVdGlscy5pbml0KG9wdGlvbnMpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBvYmplY3RcclxuICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlRmFjZWJvb2tVdGlsc1xyXG4gICAqXHJcbiAgICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VVdGlsc1xyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogVGhpcyBpcyBhIHdyYXBwZXIgZm9yXHJcbiAgICogW1BhcnNlLkZhY2Vib29rVXRpbHNde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvYXBpL3N5bWJvbHMvUGFyc2UuRmFjZWJvb2tVdGlscy5odG1sfS5cclxuICAgKi9cclxuICBwcm92aWRlci4kZ2V0ID0gUGFyc2VGYWNlYm9va1V0aWxzRmFjdG9yeTtcclxuICBQYXJzZUZhY2Vib29rVXRpbHNGYWN0b3J5LiRpbmplY3QgPSBbJ1BhcnNlVXRpbHMnXTtcclxuICBmdW5jdGlvbiBQYXJzZUZhY2Vib29rVXRpbHNGYWN0b3J5KFBhcnNlVXRpbHMpIHtcclxuICAgIHZhciBQYXJzZUZhY2Vib29rVXRpbHMgPSBQYXJzZS5GYWNlYm9va1V0aWxzO1xyXG5cclxuICAgIFsnbGluaycsICdsb2dJbicsICd1bmxpbmsnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgICAgUGFyc2VGYWNlYm9va1V0aWxzW1BhcnNlVXRpbHMud3JhcFByZWZpeCArIG1ldGhvZF0gPSBQYXJzZVV0aWxzLndyYXAoUGFyc2VGYWNlYm9va1V0aWxzW21ldGhvZF0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFBhcnNlRmFjZWJvb2tVdGlscztcclxuICB9XHJcbn1cclxuXHJcbm5nUGFyc2VNb2R1bGVcclxuICAucHJvdmlkZXIoJ1BhcnNlRmFjZWJvb2tVdGlscycsIFBhcnNlRmFjZWJvb2tVdGlsc1Byb3ZpZGVyKTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9QYXJzZUZhY2Vib29rVXRpbHMuanNcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZScpLlBhcnNlO1xyXG52YXIgbmdQYXJzZU1vZHVsZSA9IHJlcXVpcmUoJy4vbW9kdWxlLmpzJyk7XHJcbnJlcXVpcmUoJy4vUGFyc2VVdGlscy5qcycpO1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBzZXJ2aWNlXHJcbiAqIEBuYW1lIG5nUGFyc2UuUGFyc2VGaWxlXHJcbiAqXHJcbiAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXRpbHNcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgaXMgYSB3cmFwcGVyIGZvclxyXG4gKiBbUGFyc2UuUGFyc2VGaWxlXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLkZpbGUuaHRtbH0uXHJcbiAqL1xyXG5QYXJzZUZpbGVGYWN0b3J5LiRpbmplY3QgPSBbJ1BhcnNlVXRpbHMnXTtcclxuZnVuY3Rpb24gUGFyc2VGaWxlRmFjdG9yeShQYXJzZVV0aWxzKSB7XHJcbiAgdmFyIFBhcnNlRmlsZSA9IFBhcnNlLkZpbGU7XHJcblxyXG4gIFsnc2F2ZSddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgUGFyc2VGaWxlLnByb3RvdHlwZVtQYXJzZVV0aWxzLndyYXBQcmVmaXggKyBtZXRob2RdID0gUGFyc2VVdGlscy53cmFwKFBhcnNlRmlsZS5wcm90b3R5cGVbbWV0aG9kXSk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBQYXJzZUZpbGU7XHJcbn1cclxuXHJcbm5nUGFyc2VNb2R1bGVcclxuICAuZmFjdG9yeSgnUGFyc2VGaWxlJywgUGFyc2VGaWxlRmFjdG9yeSk7XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvUGFyc2VGaWxlLmpzXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2UnKS5QYXJzZTtcclxudmFyIG5nUGFyc2VNb2R1bGUgPSByZXF1aXJlKCcuL21vZHVsZS5qcycpO1xyXG5yZXF1aXJlKCcuL1BhcnNlVXRpbHMuanMnKTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgc2VydmljZVxyXG4gKiBAbmFtZSBuZ1BhcnNlLlBhcnNlT2JqZWN0XHJcbiAqXHJcbiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXHJcbiAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXRpbHNcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgaXMgYSB3cmFwcGVyIGZvclxyXG4gKiBbUGFyc2UuT2JqZWN0XXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLk9iamVjdC5odG1sfS5cclxuICovXHJcblBhcnNlT2JqZWN0RmFjdG9yeS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ1BhcnNlVXRpbHMnXTtcclxuZnVuY3Rpb24gUGFyc2VPYmplY3RGYWN0b3J5KCRyb290U2NvcGUsIFBhcnNlVXRpbHMpIHtcclxuICB2YXIgUGFyc2VPYmplY3QgPSBQYXJzZS5PYmplY3Q7XHJcblxyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQYXJzZU9iamVjdC5wcm90b3R5cGUsICckaWQnLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJCRpZCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuJCRpZCA9PT0gbnVsbCA/IHRoaXMuaWQgOiB0aGlzLiQkaWQ7XHJcbiAgICB9LFxyXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgdGhpcy4kJGlkID0gdmFsdWU7XHJcbiAgICB9LFxyXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgZW51bWVyYWJsZTogZmFsc2VcclxuICB9KTtcclxuXHJcbiAgWydkZXN0cm95QWxsJywgJ2ZldGNoQWxsJywgJ2ZldGNoQWxsSWZOZWVkZWQnLCAnc2F2ZUFsbCddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgUGFyc2VPYmplY3RbUGFyc2VVdGlscy53cmFwUHJlZml4ICsgbWV0aG9kXSA9IFBhcnNlVXRpbHMud3JhcChQYXJzZU9iamVjdFttZXRob2RdKTtcclxuICB9KTtcclxuXHJcbiAgWydkZXN0cm95JywgJ2ZldGNoJywgJ3NhdmUnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgIFBhcnNlT2JqZWN0LnByb3RvdHlwZVtQYXJzZVV0aWxzLndyYXBQcmVmaXggKyBtZXRob2RdID0gUGFyc2VVdGlscy53cmFwKFBhcnNlT2JqZWN0LnByb3RvdHlwZVttZXRob2RdKTtcclxuICB9KTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VPYmplY3QjJG9uXHJcbiAgICogQG1ldGhvZE9mIG5nUGFyc2UuUGFyc2VPYmplY3RcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIEJpbmQgZXZlbnQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gJHNjb3BlIEFuZ3VsYXIgJHNjb3BlLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgRXZlbnQgbmFtZS5cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgQ2FsbGJhY2sgY29udGV4dC5cclxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFVuYmluZCBmdW5jdGlvbi5cclxuICAgKi9cclxuICBQYXJzZU9iamVjdC5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKCRzY29wZSwgZXZlbnROYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xyXG4gICAgaWYgKCEoJHNjb3BlIGluc3RhbmNlb2YgJHJvb3RTY29wZS5jb25zdHJ1Y3RvcikpIHRocm93IFR5cGVFcnJvcihcIiRzY29wZSBpcyBub3QgaW5zdGFuY2VvZiBTY29wZVwiKTtcclxuICAgIGlmICh0eXBlb2YgZXZlbnROYW1lICE9ICdzdHJpbmcnKSB0aHJvdyBUeXBlRXJyb3IoXCJldmVudE5hbWUgaXMgbm90IHN0cmluZ1wiKTtcclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGZ1bmN0aW9uXCIpO1xyXG5cclxuICAgIHZhciBfY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgJHNjb3BlLiRhcHBseUFzeW5jKGNhbGxiYWNrLmJpbmQoY29udGV4dCwgYXJncykpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm9uKGV2ZW50TmFtZSwgX2NhbGxiYWNrLCBjb250ZXh0KTtcclxuXHJcbiAgICB2YXIgb2ZmID0gdGhpcy5vZmYuYmluZCh0aGlzLCBldmVudE5hbWUsIF9jYWxsYmFjaywgY29udGV4dCk7XHJcbiAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIG9mZik7XHJcblxyXG4gICAgcmV0dXJuIG9mZjtcclxuICB9O1xyXG5cclxuICByZXR1cm4gUGFyc2VPYmplY3Q7XHJcbn1cclxuXHJcbm5nUGFyc2VNb2R1bGVcclxuICAuZmFjdG9yeSgnUGFyc2VPYmplY3QnLCBQYXJzZU9iamVjdEZhY3RvcnkpO1xyXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL1BhcnNlT2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2UnKS5QYXJzZTtcclxudmFyIG5nUGFyc2VNb2R1bGUgPSByZXF1aXJlKCcuL21vZHVsZS5qcycpO1xyXG5yZXF1aXJlKCcuL1BhcnNlVXRpbHMuanMnKTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgc2VydmljZVxyXG4gKiBAbmFtZSBuZ1BhcnNlLlBhcnNlUXVlcnlcclxuICpcclxuICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VVdGlsc1xyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBpcyBhIHdyYXBwZXIgZm9yXHJcbiAqIFtQYXJzZS5QYXJzZVF1ZXJ5XXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLlF1ZXJ5Lmh0bWx9LlxyXG4gKi9cclxuUGFyc2VRdWVyeUZhY3RvcnkuJGluamVjdCA9IFsnUGFyc2VVdGlscyddO1xyXG5mdW5jdGlvbiBQYXJzZVF1ZXJ5RmFjdG9yeShQYXJzZVV0aWxzKSB7XHJcbiAgdmFyIFBhcnNlUXVlcnkgPSBQYXJzZS5RdWVyeTtcclxuXHJcbiAgWydjb3VudCcsICdmaW5kJywgJ2ZpcnN0JywgJ2dldCddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgUGFyc2VRdWVyeS5wcm90b3R5cGVbUGFyc2VVdGlscy53cmFwUHJlZml4ICsgbWV0aG9kXSA9IFBhcnNlVXRpbHMud3JhcChQYXJzZVF1ZXJ5LnByb3RvdHlwZVttZXRob2RdKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIFBhcnNlUXVlcnk7XHJcbn1cclxuXHJcbm5nUGFyc2VNb2R1bGVcclxuICAuZmFjdG9yeSgnUGFyc2VRdWVyeScsIFBhcnNlUXVlcnlGYWN0b3J5KTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9QYXJzZVF1ZXJ5LmpzXG4gKiogbW9kdWxlIGlkID0gOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2UnKS5QYXJzZTtcclxudmFyIG5nUGFyc2VNb2R1bGUgPSByZXF1aXJlKCcuL21vZHVsZS5qcycpO1xyXG5yZXF1aXJlKCcuL1BhcnNlQ2xhc3MuanMnKTtcclxucmVxdWlyZSgnLi9QYXJzZVV0aWxzLmpzJyk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZ1BhcnNlLlBhcnNlVXNlclByb3ZpZGVyXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQcm92aWRlciBmb3IgUGFyc2VVc2VyIHNlcnZpY2UuXHJcbiAqL1xyXG5QYXJzZVVzZXJQcm92aWRlci4kaW5qZWN0ID0gW107XHJcbmZ1bmN0aW9uIFBhcnNlVXNlclByb3ZpZGVyKCkge1xyXG4gIHZhciBwcm92aWRlciA9IHRoaXM7XHJcbiAgcHJvdmlkZXIuVXNlciA9IFBhcnNlLlVzZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxyXG4gICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VVc2VyUHJvdmlkZXIjJGF0dHJpYnV0ZXNcclxuICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlVXNlclByb3ZpZGVyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBUaGUgbmFtZXMgb2YgdGhlIGF0dHJpYnV0ZXMgdG8gY3JlYXRlIGdldHRlcnMgYW5kIHNldHRlcnMuXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuJGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VVc2VyUHJvdmlkZXIjcmVnaXN0ZXJcclxuICAgKiBAbWV0aG9kT2YgbmdQYXJzZS5QYXJzZVVzZXJQcm92aWRlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyB1c2VyIGlzIHRoZSBjdXJyZW50IHVzZXIgYW5kIGhhcyBiZWVuIGF1dGhlbnRpY2F0ZWQuXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuYXV0aGVudGljYXRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBCb29sZWFuKFBhcnNlLlVzZXIuY3VycmVudCgpKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgbmdQYXJzZS5QYXJzZVVzZXJQcm92aWRlciNkZWZpbmVBdHRyaWJ1dGVzXHJcbiAgICogQG1ldGhvZE9mIG5nUGFyc2UuUGFyc2VVc2VyUHJvdmlkZXJcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIERlZmluZXMgYXR0cmlidXRlcyBmb3IgUGFyc2UuVXNlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfFN0cmluZ1tdfSBhdHRyaWJ1dGVzIENsYXNzIG5hbWVzIGZvciByZWdpc3RyYXRpb24uXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuZGVmaW5lQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XHJcbiAgICBpZiAoIShhdHRyaWJ1dGVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgIGF0dHJpYnV0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3ZpZGVyLiRhdHRyaWJ1dGVzLnB1c2guYXBwbHkocHJvdmlkZXIuJGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXHJcbiAgICogQG5hbWUgbmdQYXJzZS5QYXJzZVVzZXJcclxuICAgKlxyXG4gICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXRpbHNcclxuICAgKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZUNsYXNzXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBUaGlzIGlzIGEgd3JhcHBlciBmb3JcclxuICAgKiBbUGFyc2UuUGFyc2VVc2VyXXtAbGluayBodHRwczovL3BhcnNlLmNvbS9kb2NzL2pzL2FwaS9zeW1ib2xzL1BhcnNlLlVzZXIuaHRtbH0uXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuJGdldCA9IFBhcnNlVXNlckZhY3Rvcnk7XHJcbiAgUGFyc2VVc2VyRmFjdG9yeS4kaW5qZWN0ID0gWydQYXJzZVV0aWxzJywgJ1BhcnNlQ2xhc3MnXTtcclxuICBmdW5jdGlvbiBQYXJzZVVzZXJGYWN0b3J5KFBhcnNlVXRpbHMsIFBhcnNlQ2xhc3MpIHtcclxuICAgIHZhciBQYXJzZVVzZXIgPSBQYXJzZS5Vc2VyO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFBhcnNlVXNlci5wcm90b3R5cGUsIHtcclxuICAgICAgdXNlcm5hbWU6IHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmdldFVzZXJuYW1lKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgdGhpcy5zZXRVc2VybmFtZSh2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBwYXNzd29yZDoge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdwYXNzd29yZCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgIHRoaXMuc2V0UGFzc3dvcmQodmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgZW1haWw6IHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmdldEVtYWlsKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgdGhpcy5zZXRFbWFpbCh2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBbJ2JlY29tZScsICdlbmFibGVSZXZvY2FibGVTZXNzaW9uJywgJ2xvZ0luJywgJ2xvZ091dCcsICdyZXF1ZXN0UGFzc3dvcmRSZXNldCcsICdzaWduVXAnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgICAgUGFyc2VVc2VyW1BhcnNlVXRpbHMud3JhcFByZWZpeCArIG1ldGhvZF0gPSBQYXJzZVV0aWxzLndyYXAoUGFyc2VVc2VyW21ldGhvZF0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgWydsb2dJbicsICdzaWduVXAnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgICAgUGFyc2VVc2VyLnByb3RvdHlwZVtQYXJzZVV0aWxzLndyYXBQcmVmaXggKyBtZXRob2RdID0gUGFyc2VVdGlscy53cmFwKFBhcnNlVXNlci5wcm90b3R5cGVbbWV0aG9kXSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBQYXJzZUNsYXNzLmRlZmluZUF0dHJpYnV0ZXMoUGFyc2VVc2VyLCBwcm92aWRlci4kYXR0cmlidXRlcyk7XHJcblxyXG4gICAgUGFyc2VDbGFzcy4kY2xhc3Nlc1snUGFyc2VVc2VyJ10gPSBQYXJzZVVzZXI7XHJcblxyXG4gICAgcmV0dXJuIFBhcnNlVXNlcjtcclxuICB9XHJcbn1cclxuXHJcbm5nUGFyc2VNb2R1bGVcclxuICAucHJvdmlkZXIoJ1BhcnNlVXNlcicsIFBhcnNlVXNlclByb3ZpZGVyKTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9QYXJzZVVzZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuYW5ndWxhcjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwid2luZG93LmFuZ3VsYXJcIlxuICoqIG1vZHVsZSBpZCA9IDExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZScpLlBhcnNlO1xyXG52YXIgbmdQYXJzZU1vZHVsZSA9IHJlcXVpcmUoJy4vbW9kdWxlLmpzJyk7XHJcbnJlcXVpcmUoJy4vUGFyc2VDbGFzcy5qcycpO1xyXG5yZXF1aXJlKCcuL1BhcnNlQ2xvdWQuanMnKTtcclxucmVxdWlyZSgnLi9QYXJzZUZhY2Vib29rVXRpbHMnKTtcclxucmVxdWlyZSgnLi9QYXJzZUZpbGUnKTtcclxucmVxdWlyZSgnLi9QYXJzZU9iamVjdC5qcycpO1xyXG5yZXF1aXJlKCcuL1BhcnNlUXVlcnkuanMnKTtcclxucmVxdWlyZSgnLi9QYXJzZVVzZXIuanMnKTtcclxucmVxdWlyZSgnLi9QYXJzZVV0aWxzLmpzJyk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZ1BhcnNlLlBhcnNlUHJvdmlkZXJcclxuICpcclxuICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VDbGFzc1Byb3ZpZGVyXHJcbiAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlRmFjZWJvb2tVdGlsc1Byb3ZpZGVyXHJcbiAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXNlclByb3ZpZGVyXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQcm92aWRlciBmb3IgUGFyc2Ugc2VydmljZS5cclxuICovXHJcblBhcnNlUHJvdmlkZXIuJGluamVjdCA9IFsnUGFyc2VDbGFzc1Byb3ZpZGVyJywgJ1BhcnNlRmFjZWJvb2tVdGlsc1Byb3ZpZGVyJywgJ1BhcnNlVXNlclByb3ZpZGVyJ107XHJcbmZ1bmN0aW9uIFBhcnNlUHJvdmlkZXIoUGFyc2VDbGFzc1Byb3ZpZGVyLCBQYXJzZUZhY2Vib29rVXRpbHNQcm92aWRlciwgUGFyc2VVc2VyUHJvdmlkZXIpIHtcclxuICB2YXIgcHJvdmlkZXIgPSB0aGlzO1xyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgcHJvcGVydHlcclxuICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlUHJvdmlkZXIjUGFyc2VcclxuICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlUHJvdmlkZXJcclxuICAgKi9cclxuICBwcm92aWRlci5QYXJzZSA9IFBhcnNlO1xyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgcHJvcGVydHlcclxuICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlUHJvdmlkZXIjQ2xhc3NcclxuICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlUHJvdmlkZXJcclxuICAgKi9cclxuICBwcm92aWRlci5DbGFzcyA9IFBhcnNlQ2xhc3NQcm92aWRlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIHByb3BlcnR5XHJcbiAgICogQG5hbWUgbmdQYXJzZS5QYXJzZVByb3ZpZGVyI0ZhY2Vib29rVXRpbHNcclxuICAgKiBAcHJvcGVydHlPZiBuZ1BhcnNlLlBhcnNlUHJvdmlkZXJcclxuICAgKi9cclxuICBwcm92aWRlci5GYWNlYm9va1V0aWxzID0gUGFyc2VGYWNlYm9va1V0aWxzUHJvdmlkZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxyXG4gICAqIEBuYW1lIG5nUGFyc2UuUGFyc2VQcm92aWRlciNVc2VyXHJcbiAgICogQHByb3BlcnR5T2YgbmdQYXJzZS5QYXJzZVByb3ZpZGVyXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuVXNlciA9IFBhcnNlVXNlclByb3ZpZGVyO1xyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgbmdQYXJzZS5QYXJzZVByb3ZpZGVyI2luaXRpYWxpemVcclxuICAgKiBAbWV0aG9kT2YgbmdQYXJzZS5QYXJzZVByb3ZpZGVyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBJbml0aWFsaXplcyBQYXJzZS5cclxuICAgKiBTZWUgW1BhcnNlLmluaXRpYWxpemVde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvYXBpL3N5bWJvbHMvUGFyc2UuaHRtbCMuaW5pdGlhbGl6ZX0uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXBwbGljYXRpb25JZCBZb3VyIFBhcnNlIEFwcGxpY2F0aW9uIElELlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBqYXZhU2NyaXB0S2V5IFlvdXIgUGFyc2UgSmF2YVNjcmlwdCBLZXkuXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChhcHBsaWNhdGlvbklkLCBqYXZhU2NyaXB0S2V5KSB7XHJcbiAgICBQYXJzZS5pbml0aWFsaXplKGFwcGxpY2F0aW9uSWQsIGphdmFTY3JpcHRLZXkpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBvYmplY3RcclxuICAgKiBAbmFtZSBuZ1BhcnNlLlBhcnNlXHJcbiAgICpcclxuICAgKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZUNsYXNzXHJcbiAgICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VDbG91ZFxyXG4gICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlRmFjZWJvb2tVdGlsc1xyXG4gICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlRmlsZVxyXG4gICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlT2JqZWN0XHJcbiAgICogQHJlcXVpcmVzIG5nUGFyc2UuUGFyc2VRdWVyeVxyXG4gICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXNlclxyXG4gICAqIEByZXF1aXJlcyBuZ1BhcnNlLlBhcnNlVXRpbHNcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFRoaXMgaXMgYSB3cmFwcGVyIGZvciBbUGFyc2Vde0BsaW5rIGh0dHBzOi8vcGFyc2UuY29tL2RvY3MvanMvYXBpL3N5bWJvbHMvUGFyc2UuaHRtbH0uXHJcbiAgICovXHJcbiAgcHJvdmlkZXIuJGdldCA9IFBhcnNlRmFjdG9yeTtcclxuICBQYXJzZUZhY3RvcnkuJGluamVjdCA9IFtcclxuICAgICdQYXJzZUNsYXNzJyxcclxuICAgICdQYXJzZUNsb3VkJyxcclxuICAgICdQYXJzZUZhY2Vib29rVXRpbHMnLFxyXG4gICAgJ1BhcnNlRmlsZScsXHJcbiAgICAnUGFyc2VPYmplY3QnLFxyXG4gICAgJ1BhcnNlUXVlcnknLFxyXG4gICAgJ1BhcnNlVXNlcicsXHJcbiAgICAnUGFyc2VVdGlscydcclxuICBdO1xyXG4gIGZ1bmN0aW9uIFBhcnNlRmFjdG9yeSgpIHtcclxuICAgIHJldHVybiBQYXJzZTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgaW5pdFxyXG4gKlxyXG4gKiBAcmVxdWlyZXMgbmdQYXJzZS5QYXJzZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogSW5pdGlhbGl6ZXMgbmdQYXJzZS5cclxuICovXHJcbmluaXQuJGluamVjdCA9IFsnUGFyc2UnXTtcclxuZnVuY3Rpb24gaW5pdCgpIHtcclxufVxyXG5cclxubmdQYXJzZU1vZHVsZVxyXG4gIC5wcm92aWRlcignUGFyc2UnLCBQYXJzZVByb3ZpZGVyKVxyXG4gIC5ydW4oaW5pdCk7XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvUGFyc2UuanNcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXHJcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsXHJcbiAqIGZyb20gYWxsIG9mIHRoZSBwcm92aWRlZCBhcnJheXMuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBkc3QgRGVzdGluYXRpb24gYXJyYXkuXHJcbiAqIEBwYXJhbSB7Li4uQXJyYXk9fSBzcmMgU291cmNlIGFycmF5cy5cclxuICogQHJldHVybnMge0FycmF5fSBEZXN0aW5hdGlvbiBhcnJheS5cclxuICovXHJcbmZ1bmN0aW9uIHVuaW9uKGRzdCwgc3JjKSB7XHJcbiAgZHN0ID0gYW5ndWxhci5pc0FycmF5KGFyZ3VtZW50c1swXSkgJiYgYXJndW1lbnRzWzBdIHx8IFtdO1xyXG4gIHNyYyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwLCBzcmNMZW5ndGggPSBzcmMubGVuZ3RoLCBhcnI7IGkgPCBzcmNMZW5ndGg7IGkrKykge1xyXG4gICAgYXJyID0gc3JjW2ldO1xyXG4gICAgaWYgKCFhbmd1bGFyLmlzQXJyYXkoYXJyKSkgY29udGludWU7XHJcbiAgICBmb3IgKHZhciBqID0gMCwgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aCwgdmFsOyBqIDwgYXJyTGVuZ3RoOyBqKyspIHtcclxuICAgICAgdmFsID0gYXJyW2pdO1xyXG4gICAgICBpZiAoZHN0LmluZGV4T2YodmFsKSA9PSAtMSkgZHN0LnB1c2godmFsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBkc3Q7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzLnVuaW9uID0gdW5pb247XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdXRpbHMuanNcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==
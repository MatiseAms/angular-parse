!function(e){function t(n){if(r[n])return r[n].exports;var s=r[n]={exports:{},id:n,loaded:!1};return e[n].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){var n=r(1);r(11),r(4),r(5),r(6),r(7),r(2),r(8),r(9),e.exports=n.name},function(e,t,r){var n=r(10);e.exports=n.module("ngParse",[])},function(e,t,r){function n(e){function t(t){return function(){var r=Array.prototype.slice.call(arguments),n=t.apply(this,r);return e(n.then.bind(n))}}function r(e,r){e[r]=t(e[r])}function n(e,t){t instanceof Array||(t=Array.prototype.slice.call(arguments,1));for(var n=0,s=t.length;s>n;n++)r(e,t[n])}this.wrap=t,this.wrapMethod=r,this.wrapMethods=n}var s=r(1);n.$inject=["$q"],e.exports=s.service("ParsePromiseWrap",n)},function(e,t){e.exports=window.Parse&&window},function(e,t,r){function n(){function e(){function e(e,t,s){var i=n(e,t,s),o=a.isObject(t)&&a.isArray(t.$attributes)?t.$attributes:[];return r(i,o),i}function r(e,r){a.isArray(r)||(r=Array.prototype.slice.call(arguments,1)),e.$attributes=[],e.defineAttributes=function(t){a.isArray(t)||(t=Array.prototype.slice.call(arguments)),t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this.get(t)},set:function(e){this.set(t,e)},configurable:!0,enumerable:!0})}),s(e.$attributes,t)},e.defineAttributes(t.$attributes),e.defineAttributes(r)}var n=o.Object.extend.bind(o.Object);return e.defineAttributes=r,e.$classes=t.$classes,o.Class=e,e}var t=this;t.$classes={},t.$attributes=[],t.register=function(e){a.isArray(e)||(e=Array.prototype.slice.call(arguments));for(var r=0,n=e.length;n>r;r++)t.$classes[e[r]]=e[r]},t.defineAttributes=function(e){a.isArray(e)||(e=Array.prototype.slice.call(arguments)),s(t.$attributes,e)},t.$get=e,e.$inject=[]}function s(){for(var e,t=a.isArray(arguments[0])&&arguments[0]||[],r=Array.prototype.slice.call(arguments,1),n=0,s=r.length;s>n;n++)if(e=r[n],a.isArray(e))for(var i,o=0,u=e.length;u>o;o++)i=e[o],-1==t.indexOf(i)&&t.push(i);return t}function i(e,t){for(var r in t.$classes)t.$classes.hasOwnProperty(r)&&"string"==typeof t.$classes[r]&&(t.$classes[r]=e.get(r))}var a=r(10),o=r(3).Parse,u=r(1);n.$inject=[],i.$inject=["$injector","ParseClass"],e.exports=u.provider("ParseClass",n).run(i)},function(e,t,r){function n(e){var t=s.Cloud;return s.$$init||e.wrapMethods(t,["run"]),t}var s=r(3).Parse,i=r(1);r(2),n.$inject=["ParsePromiseWrap"],e.exports=i.factory("ParseCloud",n)},function(e,t,r){function n(){function e(e){var t=s.FacebookUtils;return s.$$init||e.wrapMethods(t,["link","logIn","unlink"]),t}var t=this;t.FacebookUtils=s.FacebookUtils,t.initialize=t.init=function(e){s.FacebookUtils.init(e)},t.$get=e,e.$inject=["ParsePromiseWrap"]}var s=r(3).Parse,i=r(1);r(2),n.$inject=[],e.exports=i.provider("ParseFacebookUtils",n)},function(e,t,r){function n(e){var t=s.Object;return s.$$init||(Object.defineProperty(t.prototype,"$id",{get:function(){return void 0===this.$$id||null===this.$$id?this.id:this.$$id},set:function(e){this.$$id=e},configurable:!1,enumerable:!1}),e.wrapMethods(t,["destroyAll","fetchAll","fetchAllIfNeeded","saveAll"]),e.wrapMethods(t.prototype,["destroy","fetch","save"]),t.prototype.isDirty=function(){return Boolean(this.dirtyKeys().length)},t.prototype.isCreated=function(){return Boolean(this.createdAt)}),t}var s=r(3).Parse,i=r(1);r(2),n.$inject=["ParsePromiseWrap"],e.exports=i.factory("ParseObject",n)},function(e,t,r){function n(e){var t=s.Query;return s.$$init||e.wrapMethods(t.prototype,["count","each","find","first","get"]),t}var s=r(3).Parse,i=r(1);r(2),n.$inject=["ParsePromiseWrap"],e.exports=i.factory("ParseQuery",n)},function(e,t,r){function n(){function e(e,r){var n=s.User;return s.$$init||(Object.defineProperties(n.prototype,{username:{get:function(){return this.getUsername()},set:function(e){this.setUsername(e)},configurable:!0,enumerable:!0},password:{get:function(){return this.get("password")},set:function(e){this.setPassword(e)},configurable:!0,enumerable:!0},email:{get:function(){return this.getEmail()},set:function(e){this.setEmail(e)},configurable:!0,enumerable:!0},auth:{get:function(){return this.authenticated()},configurable:!0,enumerable:!1},current:{get:function(){return this.isCurrent()},configurable:!0,enumerable:!1}}),e.wrapMethods(n,["become","enableRevocableSession","logIn","logOut","requestPasswordReset","signUp"]),e.wrapMethods(n.prototype,["logIn","signUp"])),r.defineAttributes(n,t.$attributes),r.$classes.ParseUser=n,n}var t=this;t.User=s.User,t.$attributes=[],t.authenticated=function(){return Boolean(s.User.current())},t.defineAttributes=function(e){e instanceof Array||(e=Array.prototype.slice.call(arguments)),t.$attributes.push.apply(t.$attributes,e)},t.$get=e,e.$inject=["ParsePromiseWrap","ParseClass"]}var s=r(3).Parse,i=r(1);r(4),r(2),n.$inject=[],e.exports=i.provider("ParseUser",n)},function(e,t){e.exports=window.angular},function(e,t,r){function n(e,t,r){function n(){return i}var s=this;s.Parse=i,s.Class=e,s.FacebookUtils=t,s.User=r,s.initialize=function(e,t){i.initialize(e,t)},s.$get=n,n.$inject=[]}function s(e,t,r,n,s,i,a,o){s.$$init=!0}var i=r(3).Parse,a=r(1);r(4),r(5),r(6),r(7),r(2),r(8),r(9),n.$inject=["ParseClassProvider","ParseFacebookUtilsProvider","ParseUserProvider"],s.$inject=["ParseClass","ParseCloud","ParseFacebookUtils","ParseObject","Parse","ParsePromiseWrap","ParseQuery","ParseUser"],e.exports=a.provider("Parse",n).run(s)}]);
//# sourceMappingURL=data:application/json;base64,
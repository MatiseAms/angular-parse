!function (e) {
  function t(n) {
    if (r[n])return r[n].exports;
    var i = r[n] = {exports: {}, id: n, loaded: !1};
    return e[n].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports
  }

  var r = {};
  return t.m = e, t.c = r, t.p = "", t(0)
}([function (e, t, r) {
  var n = r(1);
  r(3), r(8), r(9), r(5), r(10), r(11), r(7), r(6), e.exports = n.name
}, function (e, t, r) {
  var n = r(2), i = n.module("ngParse", []);
  e.exports = i
}, function (e, t) {
  e.exports = window.angular
}, function (e, t, r) {
  function n(e, t, r) {
    function n() {
      return s
    }

    var i = this;
    i.Parse = s, i.Class = e, i.FacebookUtils = t, i.User = r, i.initialize = function (e, t) {
      s.initialize(e, t)
    }, i.$get = n, n.$inject = []
  }

  function i(e, t, r, n, i, s, o, a) {
    i.$$init = !0
  }

  var s = r(4).Parse, o = r(1);
  r(5), r(6), r(7), n.$inject = ["ParseClassProvider", "ParseFacebookUtilsProvider", "ParseUserProvider"], i.$inject = ["ParseClass", "ParseCloud", "ParseFacebookUtils", "ParseObject", "Parse", "ParseQuery", "ParseUser", "ParseUtils"], e.exports = o.provider("Parse", n).run(i)
}, function (e, t) {
  e.exports = window.Parse && window
}, function (e, t, r) {
  function n() {
    function e(e) {
      function r(t, r, i) {
        var s = n(t, r, i);
        return r && "object" == typeof r && r.$attributes instanceof Array && e.defineAttributes(s.prototype, r.$attributes), s.defineAttributes = e.defineAttributes.bind(e, s.prototype), s
      }

      var n = s.Object.extend.bind(s.Object);
      return r.$classes = t.$classes, s.Class = r, r
    }

    var t = this;
    t.$classes = {}, t.register = function (e) {
      e instanceof Array || (e = Array.prototype.slice.call(arguments));
      for (var r = 0, n = e.length; n > r; r++)t.$classes[e[r]] = e[r]
    }, t.$get = e, e.$inject = ["ParseUtils"]
  }

  function i(e, t) {
    for (var r in t.$classes)t.$classes.hasOwnProperty(r) && (t.$classes[r] = e.get(r))
  }

  var s = r(4).Parse, o = r(1);
  n.$inject = [], i.$inject = ["$injector", "ParseClass"], e.exports = o.provider("ParseClass", n).run(i)
}, function (e, t, r) {
  function n() {
    function e(e) {
      var t = i.FacebookUtils;
      return i.$$init ? t : (e.wrapMethods(t, ["link", "logIn", "unlink"]), t)
    }

    var t = this;
    t.FacebookUtils = i.FacebookUtils, t.initialize = t.init = function (e) {
      i.FacebookUtils.init(e)
    }, t.$get = e, e.$inject = ["ParseUtils"]
  }

  var i = r(4).Parse, s = r(1);
  n.$inject = [], e.exports = s.provider("ParseFacebookUtils", n)
}, function (e, t, r) {
  function n() {
    function e(e) {
      var t = i.User;
      return i.$$init ? t : (Object.defineProperties(t.prototype, {
        username: {
          get: function () {
            return this.getUsername()
          }, set: function (e) {
            this.setUsername(e)
          }, configurable: !0, enumerable: !0
        }, password: {
          get: function () {
            return this.get("password")
          }, set: function (e) {
            this.setPassword(e)
          }, configurable: !0, enumerable: !0
        }, email: {
          get: function () {
            return this.getEmail()
          }, set: function (e) {
            this.setEmail(e)
          }, configurable: !0, enumerable: !0
        }, auth: {
          get: function () {
            return this.authenticated()
          }, configurable: !0, enumerable: !1
        }, current: {
          get: function () {
            return this.isCurrent()
          }, configurable: !0, enumerable: !1
        }
      }), t.defineAttributes = e.defineAttributes.bind(e, t.prototype), e.wrapMethods(t, ["become", "enableRevocableSession", "logIn", "logOut", "requestPasswordReset", "signUp"]), e.wrapMethods(t.prototype, ["logIn", "signUp"]), t)
    }

    var t = this;
    t.User = i.User, t.authenticated = function () {
      return Boolean(i.User.current())
    }, t.$get = e, e.$inject = ["ParseUtils"]
  }

  var i = r(4).Parse, s = r(1);
  n.$inject = [], e.exports = s.provider("ParseUser", n)
}, function (e, t, r) {
  function n(e) {
    function t(t) {
      return function () {
        var r = Array.prototype.slice.call(arguments), n = t.apply(this, r);
        return e(n.then.bind(n))
      }
    }

    function r(e, r) {
      e[r] = t(e[r])
    }

    function n(e, t) {
      t instanceof Array || (t = Array.prototype.slice.call(arguments, 1));
      for (var n = 0, i = t.length; i > n; n++)r(e, t[n])
    }

    function i(e, t) {
      Object.defineProperty(e, t, {
        get: function () {
          return this.get(t)
        }, set: function (e) {
          this.set(t, e)
        }, configurable: !0, enumerable: !0
      })
    }

    function s(e, t) {
      t instanceof Array || (t = Array.prototype.slice.call(arguments, 1));
      for (var r = 0, n = t.length; n > r; r++)i(e, t[r])
    }

    this.wrapPromise = t, this.wrapMethods = n, this.defineAttributes = s
  }

  var i = r(1);
  n.$inject = ["$q"], e.exports = i.service("ParseUtils", n)
}, function (e, t, r) {
  function n(e) {
    var t = i.Object;
    return i.$$init ? t : (Object.defineProperty(t.prototype, "$id", {
      get: function () {
        return void 0 === this.$$id || null === this.$$id ? this.id : this.$$id
      }, set: function (e) {
        this.$$id = e
      }, configurable: !1, enumerable: !1
    }), e.wrapMethods(t, ["destroyAll", "fetchAll", "fetchAllIfNeeded", "saveAll"]), e.wrapMethods(t.prototype, ["destroy", "fetch", "save"]), t.prototype.isDirty = function () {
      return Boolean(this.dirtyKeys().length)
    }, t.prototype.isCreated = function () {
      return Boolean(this.createdAt)
    }, t)
  }

  var i = r(4).Parse, s = r(1);
  n.$inject = ["ParseUtils"], e.exports = s.factory("ParseObject", n)
}, function (e, t, r) {
  function n(e) {
    var t = i.Query;
    return i.$$init ? t : (e.wrapMethods(t.prototype, ["count", "each", "find", "first", "get"]), t)
  }

  var i = r(4).Parse, s = r(1);
  n.$inject = ["ParseUtils"], e.exports = s.factory("ParseQuery", n)
}, function (e, t, r) {
  function n(e) {
    var t = i.Cloud;
    return i.$$init ? t : (e.wrapMethods(t, ["run"]), t)
  }

  var i = r(4).Parse, s = r(1);
  n.$inject = ["ParseUtils"], e.exports = s.factory("ParseCloud", n)
}]);
//# sourceMappingURL=data:application/json;base64,